<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Roblox 入门</title>
      <link href="2020/07/21/Roblox%E5%85%A5%E9%97%A8/"/>
      <url>2020/07/21/Roblox%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在新城市安顿下来了，也来到了新的公司，不过暂时没有在做 Unity 的项目了，现在在用 Roblox 做项目，从没接触过，从零开始学起</p></blockquote><p>本来截了挺多的图片来介绍一下界面的，不过我发现 Roblox 官方的介绍文档写的已经很详细了，所以直接贴一下链接大家去学习一下好了。</p><p><a href="https://developer.roblox.com/zh-cn/resources/studio/Landing-Page#studio-interface">Studio 快速参考</a></p><h2 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h2><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/TIM%E6%88%AA%E5%9B%BE20200722104057.png?x-oss-process=style/iPic" alt="目录结构"></p><h2 id="Workspace"><a href="#Workspace" class="headerlink" title="Workspace"></a>Workspace</h2><p>The Workspace is the service in which any objects that are to be rendered in the 3D world exist. Objects not descending from Workspace will not be rendered or physically interact with the world.</p><p><a href="https://developer.roblox.com/zh-cn/api-reference/class/Workspace">Workspace Link</a></p><h2 id="Players"><a href="#Players" class="headerlink" title="Players"></a>Players</h2><p>The Players game service contains only <code>Player</code> objects for presently connected clients to a Roblox game server. It also contains information about a place’s configuration (such as bubble chat or classic chat). It can fetch information about players not connected to the server, such as character appearances, friends and avatar thumbnail.</p><p><a href="https://developer.roblox.com/zh-cn/api-reference/class/Players">Players Link</a></p><h2 id="Lighting"><a href="#Lighting" class="headerlink" title="Lighting"></a>Lighting</h2><p>The Lighting service controls the environmental lighting in a game. It includes a range of adjustable properties that can be used to change how lighting appears and interacts with other objects.</p><p><a href="https://developer.roblox.com/zh-cn/api-reference/class/Lighting">Lighting Link</a></p><h2 id="ReplicatedFirst"><a href="#ReplicatedFirst" class="headerlink" title="ReplicatedFirst"></a>ReplicatedFirst</h2><p>A container whose contents are replicated to all clients (but not back to the server) first before anything else.</p><p><a href="https://developer.roblox.com/zh-cn/api-reference/class/ReplicatedFirst">ReplicatedFirst Link</a></p><h2 id="ReplicatedStorage"><a href="#ReplicatedStorage" class="headerlink" title="ReplicatedStorage"></a>ReplicatedStorage</h2><p>Complex games often require a range of assets that are held in storage until they’re required.</p><p><a href="https://developer.roblox.com/zh-cn/api-reference/class/ReplicatedStorage">ReplicatedStorage Link</a></p><h2 id="ServerScriptService"><a href="#ServerScriptService" class="headerlink" title="ServerScriptService"></a>ServerScriptService</h2><p>A semantic, organized place to put your server-sided game logic, which does not interfere with the world. Scripts will run inside this service, and will not replicate to game clients, allowing for secure storage of your scripts.</p><p><a href="https://developer.roblox.com/zh-cn/api-reference/class/ServerScriptService">ServerScriptService Link</a></p><h2 id="ServerStorage"><a href="#ServerStorage" class="headerlink" title="ServerStorage"></a>ServerStorage</h2><p>A container whose contents are only accessible on the server. Objects descending from ServerStorage will not replicate to the client and will not be accessible from <code>LocalScript</code>s.</p><p>As ServerStorage is a service it can only be accessed using the <code>DataModel/GetService</code> method.</p><p>By storing large objects such as maps in ServerStorage until they are needed, network traffic will not be used up transmitting these objects to the client when they join the game.</p><p><a href="https://developer.roblox.com/zh-cn/api-reference/class/ServerStorage">ServerStorage Link</a></p><h2 id="StarterGui"><a href="#StarterGui" class="headerlink" title="StarterGui"></a>StarterGui</h2><p>The StarterGui service is a container object designed to hold <code>GUI objects</code> such as <code>ScreenGuis</code>.</p><p><a href="https://developer.roblox.com/zh-cn/api-reference/class/StarterGui">StarterGui Link</a></p><h2 id="StarterPack"><a href="#StarterPack" class="headerlink" title="StarterPack"></a>StarterPack</h2><p>A service-level container whose contents are copied into each <code>Player</code>‘s <code>Backpack</code> when the player spawns. It is generally used to hold <code>Tools</code>, but is sometimes used to hold <code>LocalScript</code>s to ensure that each player gets a copy.</p><p><a href="https://developer.roblox.com/zh-cn/api-reference/class/StarterPack">StarterPack Link</a></p><h2 id="StarterPlayer"><a href="#StarterPlayer" class="headerlink" title="StarterPlayer"></a>StarterPlayer</h2><p>A service which allows the defaults of properties in the <code>Player</code> object to be set. When a player enters the server, each property of the player object is set to the current value of the corresponding property in StarterPlayer.</p><p><a href="https://developer.roblox.com/zh-cn/api-reference/class/StarterPlayer">StarterPlayer Link</a></p><h2 id="Teams"><a href="#Teams" class="headerlink" title="Teams"></a>Teams</h2><p>The Teams service holds a game’s <code>Team</code> objects. <code>Team</code> objects must be parented to the Teams service.</p><p><a href="https://developer.roblox.com/zh-cn/api-reference/class/Teams">Teams Link</a></p><h2 id="SoundService"><a href="#SoundService" class="headerlink" title="SoundService"></a>SoundService</h2><p>A service that determines various aspects of how <code>Sound</code>s play in the game. SoundService is also often used to store <code>SoundGroup</code>s although this is not mandatory for <code>SoundGroup</code>s to work.</p><p><a href="https://developer.roblox.com/zh-cn/api-reference/class/SoundService">SoundService Link</a></p><h2 id="Chat"><a href="#Chat" class="headerlink" title="Chat"></a>Chat</h2><p>The <strong>Chat</strong> service houses the Lua code responsible for running the <a href="https://developer.roblox.com/articles/Lua-Chat-System">Lua Chat System</a>. Similar to <code>StarterPlayerScripts</code>, default objects like <code>Scripts</code> and <code>ModuleScripts</code> are inserted into the service.</p><p><a href="https://developer.roblox.com/en-us/api-reference/class/Chat">Chat Link</a></p><h2 id="LocalizationService"><a href="#LocalizationService" class="headerlink" title="LocalizationService"></a>LocalizationService</h2><p>LocalizationService is the service responsible for handling automated translation.</p><p><a href="https://developer.roblox.com/en-us/api-reference/class/LocalizationService">LocalizationService Link</a></p><h2 id="TestService"><a href="#TestService" class="headerlink" title="TestService"></a>TestService</h2><p>The TestService is a service used by Roblox internally to run analytical tests on their engine.<br>It makes it possible to write sophisticated tests right inside a game.</p><p><a href="https://developer.roblox.com/en-us/api-reference/class/TestService">TestService Link</a></p><hr><p>并没有什么自己的理解，基本上就是把最近查的资料整理在这里方便查找，Roblox官方的文档写的非常详细，就是很多查找关键字相对模糊，有的时候你想用一个功能，知道有接口，但是却不好查找，未来我会慢慢的把一些常用的功能接口一点点的总结起来，方便使用。</p>]]></content>
      
      
      <categories>
          
          <category> Roblox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Roblox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疫情&amp;在家办公&amp;分手&amp;养猫</title>
      <link href="2020/03/26/%E7%96%AB%E6%83%85-%E5%9C%A8%E5%AE%B6%E5%8A%9E%E5%85%AC-%E5%88%86%E6%89%8B-%E5%85%BB%E7%8C%AB/"/>
      <url>2020/03/26/%E7%96%AB%E6%83%85-%E5%9C%A8%E5%AE%B6%E5%8A%9E%E5%85%AC-%E5%88%86%E6%89%8B-%E5%85%BB%E7%8C%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>命里有时终须有，命里无时莫强求</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>又是一个维护的夜晚，现在是凌晨一点零七分，维护刚刚开始，距结束大概还有一个小时，闲来无聊，写写文字，缓解一下最近的压力。</p><h2 id="疫情"><a href="#疫情" class="headerlink" title="疫情"></a>疫情</h2><p>年没怎么过好，因为一直呆在家里，过年的时候和女朋友见了一面，过完年就分手了，2020年的开头就是这样，感觉有些不太顺利，又有些失意。<br>2019年，觉得2020年一定是中国的一个关键性的一年。<br>2020年初，觉得中国这一年难了，一切都这么不顺。<br>但是，两个月过去了，看看国内国外，突然发现，今年还是中国关键性的一年，感谢所有的逆行者，是你们用自己的身躯保卫了这个国家，感谢所有的老百姓，是你们用自律呵护了这个国家，你们都是英雄！<br>这次疫情，世界看到了另一种中国，一切谣言、诋毁都将不攻自破！<br><strong>武汉加油！中国加油！</strong></p><h2 id="在家办公"><a href="#在家办公" class="headerlink" title="在家办公"></a>在家办公</h2><p>公司项目的日本版本要上线了，但是赶上了疫情，在家办公，整个项目组的效率都受到了影响。<br>在家办公虽然有床可以躺，更加的自由，但是同事间的反馈速度明显降低了，生活和工作交织在了一起，<br>小区由于防疫，买卖只能去离我家最远的那个门取，单程步行15分钟，实在是够远。<br>每天就吃一顿饭，大概在凌晨0点吃。<br>害怕钉钉响起，一刻不停的盯着电脑屏幕，怕有人找你。<br>没有了下班的时间，随时都会有人找，而且本来就快要上线了，连续一个月都在紧绷着精神，随时随刻的处理问题。<br>感觉在家比在办公室还要疲惫。<br>最近终于回到办公室办公了，感觉就比在家好很多。</p><h2 id="分手"><a href="#分手" class="headerlink" title="分手"></a>分手</h2><p>应该是不适合吧，被甩了，终于没能真正的在一起，喜欢了15年了，在一起一年半，也许我也只是喜欢她的皮囊吧，或者说是馋人家身子，“你就是贱”，我的朋友这么安慰我，虽然她在我分手之前一周也分手了（笑），我们大概都是贱吧。<br>终于发现自己可能并不是爱，又或者是能量燃尽，说分手也就分手了，没有什么留恋，虽然也缓了一个星期，但是意外的平淡了起来，没有像以前一样失落，大概是经过相处之后觉得就算以后在一起了也没什么好结果吧。这竟然就是最好的结果。<br>不过这样也挺好，没有了束缚，又可以自由的生活了。<br>朋友劝我去她的城市生活，说可以陪我唱K、烧烤、逛街、做头发、一起研究新菜式和新饮品，甚至三五年后，有些积蓄了还可以一起开一家店。<del>还能给我介绍各种小姐姐！</del>心动ing！<br>可能今年七八月份吧，等疫情过去，我就辞去现在的工作，去南方找她去过另一种生活！<br>朋友嘲笑我说：“你还是有当渣男的潜质嘛~！”<br><del>没错，做个渣男不好么？</del><br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-03-25-IMG_0761.jpeg" alt="自娱自乐"></p><h2 id="养猫"><a href="#养猫" class="headerlink" title="养猫"></a>养猫</h2><p>分手之后，想来想去，决定实现一个自己长久以来的梦想 —— 养一只猫。<br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-03-25-IMG_0781.jpeg" alt="我叫七萬，请多关照！"><br>她叫 __七萬__，一只黑色的英短，虽然现在看起来不太黑了，有一天还梦到给她洗澡，然后洗掉色了，我的朋友说我：“你这是害怕什么，就梦到什么。”我觉得她说的很有道理，大概我也害怕我家的七萬真的掉色吧。<br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-03-25-IMG_0777.jpeg" alt="不会真的掉色吧？"><br>刚来我家时，还比较怕生，白天喜欢在床底下呆着，一天的大部分时间也都在睡觉，应该是猫的天性吧。<br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-03-25-IMG_0780.jpeg" alt="这个地盘是我的了！"><br>两周过去了，会跟着我跑了，会冲着我喵喵的叫了，可是还是听不懂我叫她的名字，网上说应该边喂她，边叫她，可是我恢复线下办公了，也就没有了亲手喂她的机会。<br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-03-25-IMG_0781.jpeg"><br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-03-25-IMG_0776.jpeg"><br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2020-03-25-IMG_0779.jpeg" alt="洗澡呢！泥奏凯！"></p><h2 id="写在结尾"><a href="#写在结尾" class="headerlink" title="写在结尾"></a>写在结尾</h2><p>感谢你看完了我的絮叨，至少说出来心里还是会很舒畅的。<br>新的一年又开始了，每个人都要开开心心，快快乐乐的呀~！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Encoding XXX 错误</title>
      <link href="2019/09/27/Unity%20Encoding%20XXX%20%E9%94%99%E8%AF%AF/"/>
      <url>2019/09/27/Unity%20Encoding%20XXX%20%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为海外的 Google 政策，公司原本用 <code>Unity 5.6.6</code> 出的包不再适用，于是将工程全本更新为 <code>Unity 2018</code> 版本，过程中有很多的坑，在这里记录其中一个网上答案较为难找的。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>升级 <code>Unity 2018</code> 之后，游戏的热更新报错，报错原因为我们自用的 <code>sharpzlib</code> 库在更新包解压时报错。报错内容如下：</p><p>Android：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.NotSupportedException: Encoding 437 data could not be found. Make sure you have correct international codeset assembly installed and enabled.</span><br><span class="line">      at System.Text.Encoding.GetEncoding (System.Int32 codepage) [0x00000] in &lt;00000000000000000000000000000000&gt;:0 </span><br></pre></td></tr></table></figure><p>iOS：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.NotSupportedException: Encoding 950 data could not be found. Make sure you have correct international codeset assembly installed and enabled.</span><br></pre></td></tr></table></figure><h1 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h1><p>运行时在执行 <code>System.Text.Encoding.GetEncoding(437)</code> 或 <code>System.Text.Encoding.GetEncoding(950)</code> 报错。</p><p>经查，代码缺少 <code>I18N</code> 相关库中的相关代码，<code>CP437</code> 存在于 <code>I18N.West.dll</code> 中，<code>CP950</code> 存在于 <code>I18N.CJK.dll</code> 中。</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-09-27-FF0DA506-1385-4ded-9981-59138C0F24DE-1.png?x-oss-process=style/iPic"></p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-09-27-A1BCC5A0009146A3FF6C9685D9EB6595-1.png?x-oss-process=style/iPic"></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>Unity中导入 <code>I18N.dll</code> 、 <code>I18N.West.dll</code> 、 <code>I18N.CJK.dll</code> 库</p><p><strong>注：其他类似 Encoding XXX 的问题，也可以先到 <code>I18N</code> 库中查找是否有相应接口，如果有，导入工程即可解决问题。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> .Net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Git 上“毁尸灭迹”</title>
      <link href="2019/04/10/%E5%9C%A8%20Git%20%E4%B8%8A%E2%80%9C%E6%AF%81%E5%B0%B8%E7%81%AD%E8%BF%B9%E2%80%9D/"/>
      <url>2019/04/10/%E5%9C%A8%20Git%20%E4%B8%8A%E2%80%9C%E6%AF%81%E5%B0%B8%E7%81%AD%E8%BF%B9%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>由于一个挺傻的原因，我不得不进行一次关于 Git 的大批量操作，到我开始写这篇博客的时候，我仅仅完成了不到十分之一的工作量，还有及其漫长的工作需要等着我去做！！！</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>之前一直在自己迭代一个资源管理工具，所以在测试的时候会导入一些测试用的资源，这本来是很正常的，但可能是因为脑子抽了的原因，我忘记关注测试资源的大小，直接把一个 3 个多 G 的资源提交到了我的版本库中，如果只是提交了也还好，可是我还手贱推送了。当时我也只是好奇，为啥今天的网速特别慢，我的推送怎么特别慢，直到我发现我推送的资源大小超标了，为时已晚，后悔莫及！！！</p><p><strong>提交一时爽！一直提交一直爽！！</strong></p><p>至此，我需要解决版本库过大的问题（存在无用资源）。</p><p>起初，我的想法很简单，我直接删除了相关资源，并再次提交。但我发现推送速度并没有降下来，依然很慢，到这时我才意识到问题的严重性，我可能不能使用常规的方法解决我的问题了。</p><p>不过，git 也为我们提供了后悔药，接下来我详细说明一下操作步骤。</p><h2 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff-tree --no-commit-id --name-only -r commit_id</span><br></pre></td></tr></table></figure><p>由于我已经有删除资源的提交了，所以不用重新确认我想要把哪些资源彻底的从我的版本库中移除，直接使用这条命令查询我这次提交中所有的文件路径，并粘贴出来备用。</p><h2 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --force --index-filter &#x27;git rm --cached --ignore-unmatch path-to-your-remove-file&#x27; --prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure><p>这条命令就是用来将某个文件彻底移除出版本库的，将要移除的文件路径替换到 <code>path-to-your-remove-file</code> 中即可。</p><p>然后运行这个命令，当执行完之后，这个文件将从你的所有提交记录中移除。但此时你会发现，你的版本库大小并没有变小，主要是因为 git 并没有及时的清理缓存，所以我们要执行其他命令清除缓存。</p><h2 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .git/refs/original/</span><br><span class="line">git reflog expire --expire=now --all</span><br><span class="line">git gc --prune=now</span><br><span class="line">git gc --aggressive --prune=now</span><br></pre></td></tr></table></figure><p>这就是清除 git 缓存的命令了，依次执行完，你想移除出版本库的文件就会彻底移除，这是你需要将版本库强制推送到远端，结束全部操作。</p><p>此方法不能做为常规方法使用，毕竟有可能造成各种严重的后果，比如你库没了！！！</p><p>嘛，不过问题解决了也是好的。</p><p>请各位在提交的时候一定要注意，确定需要提交了再提交！！</p><p>请各位在提交的时候一定要注意，确定需要提交了再提交！！</p><p>请各位在提交的时候一定要注意，确定需要提交了再提交！！</p><p><strong>PS: 博主需要删除的文件数量一共 3980 个，每个需要 110 秒。。。我的机器需要不停转的运行五天！！！血的教训啊！！QAQ！</strong></p><p><strong>PPS: 最终来报告下结果吧。。。处理完3980个文件，我总共花了两周的时间。。。心好累，我去睡觉了。。。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序猿的折玫瑰指南</title>
      <link href="2019/01/27/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E6%8A%98%E7%8E%AB%E7%91%B0%E6%8C%87%E5%8D%97/"/>
      <url>2019/01/27/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E6%8A%98%E7%8E%AB%E7%91%B0%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在繁杂且忙碌的工作中，也要保有一颗浪漫的心，去爱着你的另一半</p></blockquote><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>取出一张正方形纸<br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161039.jpg?x-oss-process=style/iPic" alt="取出一张正方形纸"></li><li>横向对折，再纵向对折<br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161040.jpg?x-oss-process=style/iPic" alt="横向对折，再纵向对折"></li><li>展开纸，对角折<br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161041.jpg?x-oss-process=style/iPic" alt="展开纸，对角折"></li><li>打开后，折痕如下<br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161043.jpg?x-oss-process=style/iPic" alt="打开后，折痕如下"></li><li>四边角折起<br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161044.jpg?x-oss-process=style/iPic" alt="四边角折起"></li><li>延一条对角线对折<br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161045.jpg?x-oss-process=style/iPic" alt="延一条对角线对折"></li><li>延红线处想上对折<br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161046.jpg?x-oss-process=style/iPic" alt="延红线处想上对折"></li><li>另一边同样向上对折<br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161047.jpg?x-oss-process=style/iPic" alt="另一边同样向上对折"></li><li>打开后延红线折起<br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161048.jpg?x-oss-process=style/iPic" alt="打开后延红线折起"></li><li>折起后如下图<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161049.jpg?x-oss-process=style/iPic" alt="折起后如下图"></li><li>按红线处折起<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161051.jpg?x-oss-process=style/iPic" alt="按红线处折起"></li><li>折起后如下图<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161052.jpg?x-oss-process=style/iPic" alt="折起后如下图"></li><li>展开后如下图，找到红线处<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161053.jpg?x-oss-process=style/iPic" alt="展开后如下图，找到红线处"></li><li>将纸翻转<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161054.jpg?x-oss-process=style/iPic" alt="将纸翻转"></li><li>将四条对角线捏起，如下图<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161055.jpg?x-oss-process=style/iPic" alt="将四条对角线捏起，如下图"></li><li>延箭头方向向内对折<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161056.jpg?x-oss-process=style/iPic" alt="延箭头方向向内对折"><br>   对折的同时将顶部的四方形延其对角线向下压折</li><li>上下纸必须向相反方向折<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161057.jpg?x-oss-process=style/iPic" alt="上下纸必须向相反方向折"></li><li>压平折纸后如下图<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161058.jpg?x-oss-process=style/iPic" alt="压平折纸后如下图"></li><li>按箭头将边折起<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161059.jpg?x-oss-process=style/iPic" alt="按箭头将边折起"></li><li>再将后半边从后方撑开<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161060.jpg?x-oss-process=style/iPic" alt="再将后半边从后方撑开"></li><li>将折纸下方翻出，如下图<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161100.jpg?x-oss-process=style/iPic" alt="将折纸下方翻出，如下图"></li><li>按红色箭头分别向下折<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161101.jpg?x-oss-process=style/iPic" alt="按红色箭头分别向下折"></li><li>按红线将折纸向下压出<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161102.jpg?x-oss-process=style/iPic" alt="按红线将折纸向下压出"></li><li>完成一边后效果<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161103.jpg?x-oss-process=style/iPic" alt="完成一边后效果"></li><li>这是侧照<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161104.jpg?x-oss-process=style/iPic" alt="这是侧照"></li><li>四边都完成后的样子<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161105.jpg?x-oss-process=style/iPic" alt="四边都完成后的样子"></li><li>翻过来的样子<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161106.jpg?x-oss-process=style/iPic" alt="翻过来的样子"></li><li>按红线折出三角<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161107.jpg?x-oss-process=style/iPic" alt="按红线折出三角"></li><li>完成一个角后的效果<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161108.jpg?x-oss-process=style/iPic" alt="完成一个角后的效果"></li><li>按红线将三角向上折<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161109.jpg?x-oss-process=style/iPic" alt="按红线将三角向上折"></li><li>折好一个角的效果<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161110.jpg?x-oss-process=style/iPic" alt="折好一个角的效果"></li><li>按箭头向左边折<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161111.jpg?x-oss-process=style/iPic" alt="按箭头向左边折"></li><li>折好一个角的效果<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161112.jpg?x-oss-process=style/iPic" alt="折好一个角的效果"></li><li>四边都折好的效果<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161113.jpg?x-oss-process=style/iPic" alt="四边都折好的效果"></li><li>延红线将折纸对折再向后折<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161114.jpg?x-oss-process=style/iPic" alt="延红线将折纸对折再向后折"></li><li>四边都折好的效果<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161115.jpg?x-oss-process=style/iPic" alt="四边都折好的效果"></li><li>侧边效果<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161117.jpg?x-oss-process=style/iPic" alt="侧边效果"></li><li>从花上方看<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161119.jpg?x-oss-process=style/iPic" alt="从花上方看"></li><li>从下方看<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161121.jpg?x-oss-process=style/iPic" alt="从下方看"></li><li>将一只脚向内折<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161124.jpg?x-oss-process=style/iPic" alt="将一只脚向内折"></li><li>第二只脚<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161125.jpg?x-oss-process=style/iPic" alt="第二只脚"></li><li>第三只脚<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161126.jpg?x-oss-process=style/iPic" alt="第三只脚"></li><li>第四只脚<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161127.jpg?x-oss-process=style/iPic" alt="第四只脚"></li><li>四边花瓣轻微外拉<br>   <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161128.jpg?x-oss-process=style/iPic" alt="四边花瓣轻微外拉"><br>   露出花心、整理花型，完成</li></ol><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-161129.jpg?x-oss-process=style/iPic" alt="祝大家有美好的一天！"><br>祝大家有美好的一天！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 折纸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用指令集</title>
      <link href="2019/01/26/Git%20%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
      <url>2019/01/26/Git%20%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="创建仓库（初始化）"><a href="#创建仓库（初始化）" class="headerlink" title="创建仓库（初始化）"></a>创建仓库（初始化）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前指定目录下创建</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个仓库目录</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆一个远程项目</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h2 id="添加文件到缓存区"><a href="#添加文件到缓存区" class="headerlink" title="添加文件到缓存区"></a>添加文件到缓存区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加所有变化的文件</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加名称指定文件</span></span><br><span class="line">$ git add text.txt</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m <span class="string">&quot;msg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="标签Tags"><a href="#标签Tags" class="headerlink" title="标签Tags"></a>标签Tags</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加标签 在当前commit</span></span><br><span class="line">$ git tag -a v1.0 -m <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标签 在指定commit</span></span><br><span class="line">$ git tag v1.0 [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">$ git tag -d V1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送</span></span><br><span class="line">$ git push origin --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取</span></span><br><span class="line">$ git fetch origin tag V1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archives</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑 adb interface 驱动失效解决办法</title>
      <link href="2019/01/23/Unity3D%20%E6%97%A0%E6%B3%95%20BuildandRun/"/>
      <url>2019/01/23/Unity3D%20%E6%97%A0%E6%B3%95%20BuildandRun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>来到新公司，电脑的系统为 Win7 x64，使用安卓测试机进行测试的时候，发现没有办法 BuildandRun，经过排查，发现是 adb interface 的驱动异常造成的，经过努力，将解决办法记录下来。</p></blockquote><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li>在设备管理器中，找到驱动异常的 ADB Interface，右键， <strong>“更新驱动程序软件”</strong></li><li>选择 <strong>“浏览计算机以查找驱动程序软件”</strong><br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-151312.png?x-oss-process=style/iPic" alt="“浏览计算机以查找驱动程序软件”"></li><li>继续选择 <strong>“从计算机的设备驱动程序列表中选择”</strong><br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-WechatIMG29.png?x-oss-process=style/iPic" alt="“从计算机的设备驱动程序列表中选择”"></li><li>不做任何选择，直接点击 <strong>“下一步”</strong><br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-WechatIMG35.png?x-oss-process=style/iPic" alt="“下一步”"></li><li>选择 <strong>“从磁盘安装”</strong> ， <strong>“浏览”</strong> Android SDK 目录中的 <code>android_winusb.inf</code> 文件，路径为 <code>%SDK目录%\extras\google\usb_driver</code>，点击 “确定”<br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-WechatIMG30.png?x-oss-process=style/iPic" alt="“从磁盘安装”"><br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-WechatIMG31.png?x-oss-process=style/iPic" alt="“浏览”"></li><li>选择 <strong>“Android Composite ADB Interface”</strong> ，点击 <strong>“下一步”</strong><br>  <img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-WechatIMG36.png?x-oss-process=style/iPic" alt="“Android Composite ADB Interface”"></li><li>忽略安装中的警告，选择 <strong>“继续安装”</strong></li><li>安装完成</li></ol>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hugo搭建博客</title>
      <link href="2018/09/17/%E4%BD%BF%E7%94%A8%20Hugo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2018/09/17/%E4%BD%BF%E7%94%A8%20Hugo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用Hugo搭建自己的博客</p></blockquote><h1 id="搭建环境与使用工具"><a href="#搭建环境与使用工具" class="headerlink" title="搭建环境与使用工具"></a>搭建环境与使用工具</h1><p>服务器：VPS + CentOS 7.0</p><p>使用工具：yum、wget、go、git、hugo</p><h2 id="wget-安装"><a href="#wget-安装" class="headerlink" title="wget 安装"></a>wget 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure><h2 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></table></figure><h1 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h1><h2 id="下载-Go-环境"><a href="#下载-Go-环境" class="headerlink" title="下载 Go 环境"></a>下载 Go 环境</h2><p>手动 wget 安装，不推荐 yum 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.golangtc.com/static/go/1.11/go1.11.linux-amd64.tar.gz</span><br><span class="line">sudo tar -xzf go1.11.linux-amd64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure><h2 id="配置-Go-环境变量"><a href="#配置-Go-环境变量" class="headerlink" title="配置 Go 环境变量"></a>配置 Go 环境变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">或者</span><br><span class="line">vi $HOME/.profile</span><br></pre></td></tr></table></figure><p>添加如下内容并保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> GO PATH</span></span><br><span class="line">export PATH=$PATH:/usr/local/go/bin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> GO GOPATH</span></span><br><span class="line">export GOPATH=/home/golang</span><br></pre></td></tr></table></figure><p>使 profile 配置立即生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source $HOME/.profile</span><br></pre></td></tr></table></figure><p>查看 Go 版本或者环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go version #查看go版本</span><br><span class="line">go env #查看go环境变量</span><br></pre></td></tr></table></figure><p>完成。</p><h2 id="下载-Hugo-源码库"><a href="#下载-Hugo-源码库" class="headerlink" title="下载 Hugo 源码库"></a>下载 Hugo 源码库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir $HOME/src</span><br><span class="line">cd $HOME/src</span><br><span class="line">git clone https://github.com/gohugoio/hugo.git</span><br></pre></td></tr></table></figure><h2 id="编译-Hugo"><a href="#编译-Hugo" class="headerlink" title="编译 Hugo"></a>编译 Hugo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd hugo</span><br><span class="line">go install</span><br></pre></td></tr></table></figure><h1 id="博客创建"><a href="#博客创建" class="headerlink" title="博客创建"></a>博客创建</h1><h2 id="创建新博客"><a href="#创建新博客" class="headerlink" title="创建新博客"></a>创建新博客</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new site &quot;博客名&quot;</span><br></pre></td></tr></table></figure><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd quickstart</span><br><span class="line">git init</span><br><span class="line">git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Edit your config.toml configuration file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> and add the Ananke theme.</span></span><br><span class="line">echo &#x27;theme = &quot;ananke&quot;&#x27; &gt;&gt; config.toml</span><br></pre></td></tr></table></figure><h2 id="※-编辑配置文件"><a href="#※-编辑配置文件" class="headerlink" title="※ 编辑配置文件"></a>※ 编辑配置文件</h2><p><a href="https://github.com/CoderTaoX/Blog/blob/master/config.toml">自用示例配置文件</a></p><h2 id="添加新文章"><a href="#添加新文章" class="headerlink" title="添加新文章"></a>添加新文章</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new posts/my-first-post.md</span><br></pre></td></tr></table></figure><h2 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h2><h2 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hugo server -D</span><br><span class="line"></span><br><span class="line">Started building sites ...</span><br><span class="line">Built site for language en:</span><br><span class="line">1 of 1 draft rendered</span><br><span class="line">0 future content</span><br><span class="line">0 expired content</span><br><span class="line">1 regular pages created</span><br><span class="line">8 other pages created</span><br><span class="line">0 non-page files copied</span><br><span class="line">1 paginator pages created</span><br><span class="line">0 categories created</span><br><span class="line">0 tags created</span><br><span class="line">total in 18 ms</span><br><span class="line">Watching for changes in /Users/bep/sites/quickstart/&#123;data,content,layouts,static,themes&#125;</span><br><span class="line">Serving pages from memory</span><br><span class="line">Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)</span><br><span class="line">Press Ctrl+C to stop</span><br></pre></td></tr></table></figure><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul><li>Hugo 服务常驻后台</li><li>Hugo Short Code 配置</li><li>Google 点击量记录</li><li>其他插件试用</li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ul><li><a href="https://teddysun.com/486.html">一键搭建 SS</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hugo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 提交的移动、合并、与修改</title>
      <link href="2018/09/04/Git%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>2018/09/04/Git%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在工作中，或多或少的都会遇到赶工的情况，由于工作紧急，对需求的理解不到位等情况，可能在代码上做很多无用功，产生很多无用的提交，或是将工作完成后，把代码一股脑的全部提交了。提交变得非常的混乱，这时，我们需要对我们的提交进行整理！</p></blockquote><p>由于我们在 A 分支上进行了太多的操作，导致 A 分支现在混乱不堪，我们无法再 A 分支上去整理我的提交，所以，我们要在最新的 <code>master</code> 分支上新建一个 B 分支。</p><ol><li>使用 <code>git rebase -i A 分支的前一个提交</code> 将A分支 <code>rebase</code> 到 B 分支上</li><li>进入编辑模式，将除了第一行提交外的所有提交前的 <code>pack</code> 更改为 <code>squash</code> 或 <code>s</code></li><li><code>:wq</code> 保存退出，完成 <code>rebase</code></li></ol><p>这时，A 分支的所有提交都合并成一次提交，并 <code>rebase</code> 到了 B 分支上，一些重复的修改（在一次提交将 a 改为 b，在另一次提交又将 b 改回成 a）已经消失了，这样，一些无用的修改就不在分支里面展现了，接下来，我们需要对剩下的文件进行重新整理提交</p><ol><li>现在 B 上已经有了一次新的提交，<code>git reset</code> 这次提交，并保留所有的修改到暂存区，这样 B 分支上就拥有了 A 分支的所有改动</li><li>根据需要选择文件（一般是根据功能或者修改的模块）依次进行提交操作就可以了，这样 B 分支上的提交就全部都是有用提交，并且清晰明了了！</li></ol><p>这些操作虽然简单，但是操作时一定要仔细，避免把自己辛苦码的代码弄丢哦，一定要备份！</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mesh 中的 material 与 sharedMaterial</title>
      <link href="2018/08/26/material%20%E4%B8%8E%20sharedMaterial%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2018/08/26/material%20%E4%B8%8E%20sharedMaterial%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>改变 Mesh 的 material 时的注意事项</p></blockquote><p>也是解决 Bug 时发现的问题，我们的美术发现他们使用的材质在 Editor 下和客户端下的 offset 移动速度不一样，在手机端明显要快两倍到三倍。</p><p>我们的 offset 平移代码是这样的</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;  </span><br><span class="line">    _material.mainTextureOffset += <span class="keyword">new</span> Vector2(Speed.x, Speed.y) * Time.deltaTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来我以为，是因为手机帧率不稳定导致的，但是 <code>Time.deltaTime</code> 和刷新率的不稳定，最多造成轻微的误差或者卡顿，绝对不会出现手机端比编辑器模式快两三倍的问题，所以这个原因被排除了。</p><p>直到我发现</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _material = gameObject.GetComponent&lt;Renderer&gt;().GetMaterial();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的material并不是通过 <code>.material</code> 获得的，所以我跟进 <code>GetMaterial()</code> 方法，发现</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Material <span class="title">GetMaterial</span>(<span class="params"><span class="keyword">this</span> Renderer renderer</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">    <span class="keyword">return</span> renderer.material;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> renderer.sharedMaterial;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来我在编辑器下和在手机端使用的material是不同的，难道问题出在这？</p><p>没错，问题就在这里， <code>material</code> 和 <code>sharedMaterial</code></p><blockquote><p>sharedMaterial 是共用的 Material，称为共享材质。修改共享材质会改变所用使用该材质的物体，并且编辑器中的材质设置也会改变。<br>material 是独立的 Material，返回分配给渲染器的第一个材质。修改材质仅会改变该物体的材质。如果该材质被其他的渲染器使用，将克隆该材质并用于当前的渲染器。</p></blockquote><p>这样，快两三倍的原因就找到了…</p><p>因为offset的改变是通过 <code>.mainTextureOffset += value</code> 的方式实现的，所以在手机端同场景中，材质球被复用一次，offset的累加就会快一倍，复用两次，offset的累加就会快两倍</p><p>解决办法也比较简单</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _offsetX += Time.deltaTime * Speed.x;</span><br><span class="line">    _offsetY += Time.deltaTime * Speed.y;</span><br><span class="line">    _material.mainTextureOffset = <span class="keyword">new</span> Vector2(_offsetX, _offsetY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用直接赋值的方式就能够解决 <code>.mainTextureOffset += value</code> 的累加重复问题<br><strong>注：这种方法只能用于复用的材质纹理移动速度统一且同步的状态，所以一定要和技美约定好材质球的使用方式才行！</strong></p><blockquote><h1 id="使用-material-时的内存泄漏问题"><a href="#使用-material-时的内存泄漏问题" class="headerlink" title="使用 material 时的内存泄漏问题"></a>使用 material 时的内存泄漏问题</h1><p>每一次引用 Renderer.material 的时候，都会生成一个新的 material 到内存中去，销毁物体的时候需要我们手动去销毁该material，否则会一直存在内存中。<br>官方文档说：<br>This function automatically instantiates the materials and makes them unique to this renderer. It is your responsibility to destroy the materials when the game object is being destroyed. Resources.UnloadUnusedAssets also destroys the materials but it is usually only called when loading a new level.<br>此方法自动实例化该材质并且使其成为该渲染器独有的材质。当该游戏物体被删除时，你应该手动删除该材质。当替换场景调用 Resources.UnloadUnusedAssets 也可以删除该材质。<br>网上的解决方案如下：<br><a href="http://www.xuanyusong.com/archives/2530">http://www.xuanyusong.com/archives/2530</a><br>编辑器下使用 material， 其他平台使用 sharedMaterial</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Material <span class="title">GetMaterial</span>(<span class="params">Renderer render</span>)</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR  </span></span><br><span class="line">    <span class="keyword">return</span> render.material;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>  </span></span><br><span class="line">    <span class="keyword">return</span> render.sharedMaterial;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.jianshu.com/p/ababf547d992">http://www.jianshu.com/p/ababf547d992</a><br>如果是主角这一类gameobject身上需要修改材质的属性或者shader属性比较多的时候，可以第一次使用material，这样可以动态的生成一个material实例，然后再使用sharedmaterial，动态的修改这个新生成的material，而且不会创建新的material。<br><a href="https://blog.uwa4d.com/archives/optimzation_memory_2.html">https://blog.uwa4d.com/archives/optimzation_memory_2.html</a><br>一般情况下，资源属性的改变情况都是固定的，并非随机出现。比如，假设GameObject受到攻击时，其Material属性改变随攻击类型的不同而有三种不同的参数设置。那么，对于这种需求，我们建议你直接制作三种不同的Material，在Runtime情况下通过代码直接替换对应GameObject的Material，而非改变其Material的属性。这样，你会发现，成百上千的instance Material在内存中消失了，取而代之的，则是这三个不同的Material资源。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Shader滚动图片</title>
      <link href="2018/08/13/%E8%AE%A9%E8%83%8C%E6%99%AF%E5%8A%A8%E8%B5%B7%E6%9D%A5/"/>
      <url>2018/08/13/%E8%AE%A9%E8%83%8C%E6%99%AF%E5%8A%A8%E8%B5%B7%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在实现 FlappyBird 的实现，需要用到背景滚动，就上网搜集了很多方法，比较常用的就是利用 Shader 实现图片滚动，在这里记录一下。</p></blockquote><p>下面的着色器代码实现了“滚动的背景”功能。这里定义了3个变量，其中 _MainTex 代表背景贴图，_Width 代表显示背景的百分比，_Distance 代表当前滚动的距离。核心代码为 “i.uv.x = frac(i.uv.x*_Width + _Distance);”，其中 frac 是取小数的函数，如 1.23 取出来是 0.23，其功能是将 i.uv.x 控制在 0 到 1 的范围，进而显示出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Custom/ImageRoll&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;Main Tex&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line"></span><br><span class="line">        _Width (&quot;Width&quot;, float) = 0.5</span><br><span class="line">        _Distance (&quot;Distance&quot;, float) = 0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123;&quot;Queue&quot;=&quot;Transparent&quot; &quot;IgnoreProjector&quot;=&quot;True&quot; &quot;RenderType&quot;=&quot;Transparent&quot;&#125;</span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123; &quot;LightMode&quot;=&quot;ForwardBase&quot; &#125;</span><br><span class="line">            ZTest off</span><br><span class="line">            ZWrite Off</span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma vertex vert  </span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float _Width;</span><br><span class="line">            float _Distance;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;  </span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;  </span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;  </span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;  </span><br><span class="line"></span><br><span class="line">            v2f vert (a2v v)</span><br><span class="line">            &#123;  </span><br><span class="line">                v2f o;  </span><br><span class="line">                o.pos = mul(UNITY_MATRIX_MVP, v.vertex);  </span><br><span class="line"></span><br><span class="line">                o.uv.x = v.texcoord.x;</span><br><span class="line">                o.uv.y = v.texcoord.y;</span><br><span class="line">                return o;</span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            fixed4 frag (v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                i.uv.x = frac(i.uv.x*_Width + _Distance);</span><br><span class="line">                fixed4 c = tex2D(_MainTex, i.uv);</span><br><span class="line">                return c;</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Transparent/VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostProcessBuild 的使用方法（续）</title>
      <link href="2018/08/04/PostProcessBuild%20%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%88%E7%BB%AD%EF%BC%89/"/>
      <url>2018/08/04/PostProcessBuild%20%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%88%E7%BB%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>更换了正式版的 SDK，因为需求是第三方登录应用，所以要添加外部程序的启动功能</p></blockquote><p>想要你的 APP 启动另外的 APP，就需要在下图中添加相关APP的信息</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-141536.jpg?x-oss-process=style/iPic" alt="添加相关APP的信息"></p><p>但是想要集成到自动编译打包中，肯定不能手动的在图形界面中添加了</p><p>上图的本质呢，其实还是 Info.plist 文件，只是 Xcode 帮你把 plist 可视化了而已，所以我们的具体操作还是通过 Unity 脚本去修改 plist 文件就可以了</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> plistPath = Path.Combine(pathToBuildProject, <span class="string">&quot;Info.plist&quot;</span>);</span><br><span class="line">PlistDocument plist = <span class="keyword">new</span> PlistDocument();</span><br><span class="line">plist.ReadFromFile(plistPath);</span><br><span class="line">PlistElementDict rootDict = plist.root;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CFBundleURLTypes</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> urlKey = <span class="string">&quot;CFBundleURLTypes&quot;</span>;</span><br><span class="line">PlistElementArray urlAry;</span><br><span class="line">PlistElement urlel;</span><br><span class="line"><span class="keyword">if</span> (rootDict.values.TryGetValue(urlKey, <span class="keyword">out</span> urlel))</span><br><span class="line">&#123;</span><br><span class="line">    urlAry = lspel.AsArray();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    urlAry = rootDict.CreateArray(urlKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PlistElementDict qqdic = urlAry.AddDict();</span><br><span class="line">qqdic.SetString(<span class="string">&quot;CFBundleTypeRole&quot;</span>, <span class="string">&quot;Editor&quot;</span>);</span><br><span class="line">qqdic.SetString(<span class="string">&quot;CFBundleURLName&quot;</span>, <span class="string">&quot;qq&quot;</span>);</span><br><span class="line">PlistElementArray qqary = <span class="keyword">new</span> PlistElementArray();</span><br><span class="line">qqary.AddString(<span class="string">&quot;*************&quot;</span>);</span><br><span class="line">qqdic[<span class="string">&quot;CFBundleURLSchemes&quot;</span>] = qqary;</span><br><span class="line"></span><br><span class="line">PlistElementDict wxdic = urlAry.AddDict();</span><br><span class="line">wxdic.SetString(<span class="string">&quot;CFBundleTypeRole&quot;</span>, <span class="string">&quot;Editor&quot;</span>);</span><br><span class="line">wxdic.SetString(<span class="string">&quot;CFBundleURLName&quot;</span>, <span class="string">&quot;wx&quot;</span>);</span><br><span class="line">PlistElementArray wxary = <span class="keyword">new</span> PlistElementArray();</span><br><span class="line">wxary.AddString(<span class="string">&quot;*************&quot;</span>);</span><br><span class="line">wxdic[<span class="string">&quot;CFBundleURLSchemes&quot;</span>] = wxary;</span><br><span class="line"></span><br><span class="line">PlistElementDict alidic = urlAry.AddDict();</span><br><span class="line">alidic.SetString(<span class="string">&quot;CFBundleTypeRole&quot;</span>, <span class="string">&quot;Editor&quot;</span>);</span><br><span class="line">alidic.SetString(<span class="string">&quot;CFBundleURLName&quot;</span>, <span class="string">&quot;Ali&quot;</span>);</span><br><span class="line">PlistElementArray aliary = <span class="keyword">new</span> PlistElementArray();</span><br><span class="line">aliary.AddString(<span class="string">&quot;*************&quot;</span>);</span><br><span class="line">alidic[<span class="string">&quot;CFBundleURLSchemes&quot;</span>] = aliary;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用修改</span></span><br><span class="line">File.WriteAllText(plistPath, plist.WriteToString());</span><br></pre></td></tr></table></figure><p>上面的代码只是简单的例子，但是完全可以满足少量外部 APP 开起的需求，如果你需要添加更多的外部 APP，请使用 for 循环添加（笑）</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>控制 UGUI 的 ScrollViewCell 的重叠显示效果</title>
      <link href="2018/07/21/%E6%88%91%E6%83%B3%E8%AE%A9%20Cell%20%E9%87%8D%E5%8F%A0%E6%98%BE%E7%A4%BA/"/>
      <url>2018/07/21/%E6%88%91%E6%83%B3%E8%AE%A9%20Cell%20%E9%87%8D%E5%8F%A0%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近接到一个需求，需要实现一个居中放大并且有重叠部分的 ScrollView，折腾了比较久的时间，最后使用了 FancyScrollView 的基本实现+个人的一些自定义实现了相关功能，在这里记录一下实现中间放大并进行层级管理的过程。</p></blockquote><p>需求效果：</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-ScrollView%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0.png?x-oss-process=style/iPic" alt="需求效果"></p><p>从图中可以看出，居中显示的Cell位于最上层，也就是同一个父类（content）的最下方，但是 FancyScrollView 只实现了不重叠 Cell 的中间放大效果，因为只要不是重叠的Cell，这种放大效果是不会穿帮的。</p><p>但是一旦有重叠部分，这种效果就会穿帮的很厉害，具体表现就是后加载的Cell永远在先加载的Cell的前方。</p><h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><p>要保证中间的 Cell 永远在最前方，且其他 Cell 依次显示在后方，我们就需要对 Cell 的位置偏差值进行计算（距离中心线的距离，CellOffset）。</p><p>好在 FancyScrollView 是通过动画控制 Cell 的 Anchor 来实现 Cell 的位置变换的，所以我们能够很轻易的得到 Cell 的 Anchor 值，因为我的需求是纵向滑动，所以我只需要取得 AnchorMin.y（AnchorMax.y也可以）,并将它与默认的中间值 0.5F 进行比较，距离越远，显示就越靠后。</p><h1 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h1><p>使用 <strong>Transform</strong> 自带的 <strong>SetSiblingIndex</strong> 方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">UpdatePosition</span>(<span class="params"><span class="built_in">float</span> position</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _currentPosition = position;</span><br><span class="line">    animator.Play(scrollTriggerHash, <span class="number">-1</span>, position);</span><br><span class="line">    animator.speed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.transform.SetSiblingIndex(<span class="number">3</span> - (<span class="built_in">int</span>)Mathf.Abs((button.gameObject.GetComponent&lt;RectTransform&gt;().anchorMin.y - <span class="number">0.5F</span>) * <span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法中间包含了一些常数（如：3），这个常数需要根据你动画设置的偏移值进行计算，以达到最好的效果。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> UGUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity集成第三方SDK问题总结</title>
      <link href="2018/07/11/Unity%20%E9%9B%86%E6%88%90%E7%AC%AC%E4%B8%89%E6%96%B9%20SDK%20%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>2018/07/11/Unity%20%E9%9B%86%E6%88%90%E7%AC%AC%E4%B8%89%E6%96%B9%20SDK%20%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在工作中经常需要集成一些第三方的SDK，也出了挺多问题并解决，在这里记录一下解决办法。</p></blockquote><h1 id="问题一：集成的第三方SDK不能跟随Unity3D的打包参数锁定旋转方向"><a href="#问题一：集成的第三方SDK不能跟随Unity3D的打包参数锁定旋转方向" class="headerlink" title="问题一：集成的第三方SDK不能跟随Unity3D的打包参数锁定旋转方向"></a>问题一：集成的第三方SDK不能跟随Unity3D的打包参数锁定旋转方向</h1><p>将<code>UnityAPPController.mm</code>中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (NSUInteger)application:(UIApplication*)application supportedInterfaceOrientationsForWindow:(UIWindow*)window</span><br><span class="line">&#123;</span><br><span class="line">    // No rootViewController is set because we are switching from one view controller to another, all orientations should be enabled</span><br><span class="line">    if ([window rootViewController] == nil)</span><br><span class="line">        return UIInterfaceOrientationMaskAll;</span><br><span class="line"></span><br><span class="line">    // Some presentation controllers (e.g. UIImagePickerController) require portrait orientation and will throw exception if it is not supported.</span><br><span class="line">    // At the same time enabling all orientations by returning UIInterfaceOrientationMaskAll might cause unwanted orientation change</span><br><span class="line">    // (e.g. when using UIActivityViewController to &quot;share to&quot; another application, iOS will use supportedInterfaceOrientations to possibly reorient).</span><br><span class="line">    // So to avoid exception we are returning combination of constraints for root view controller and orientation requested by iOS.</span><br><span class="line">    // _forceInterfaceOrientationMask is updated in willChangeStatusBarOrientation, which is called if some presentation controller insists on orientation change.</span><br><span class="line">    return [[window rootViewController] supportedInterfaceOrientations] | _forceInterfaceOrientationMask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>supportedInterfaceOrientationsForWindow</code>这个方法整段屏蔽或删除<br><em>原因：Unity在允许自由旋转屏幕的时候会自动生成这个方法，即使你已经选定了锁定的旋转方向，这个方法还是会将游戏以外的（如SDK的）界面忽略在锁定之外，造成游戏旋转方向正确，但SDK旋转方向不正确的问题</em></p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FancyScrollView的使用方法</title>
      <link href="2018/07/05/FancyScrollView%20%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>2018/07/05/FancyScrollView%20%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>FancyScrollView，一个通用的Unity ScrollView组件</p></blockquote><h1 id="FancyScrollView"><a href="#FancyScrollView" class="headerlink" title="FancyScrollView "></a>FancyScrollView <a href="http://mit-license.org/"><img src="https://img.shields.io/badge/license-MIT-lightgrey.svg?style=flat" alt="License"></a></h1><p>一个通用的ScrollView组件，可实现高度灵活的Cell动画。还支持无限滚动。</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-141545.jpg" alt="效果图"><br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-141545.gif" alt="效果图"><br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-141546.gif" alt="效果图"></p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>FancyScrollView在更新单元格的位置时，将显示在屏幕上的范围内的值赋予每一个单元格。在单元格侧以0.0 ~ 1.0的值为基础，可以自由控制滚动中的外观。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>最简方法</p><ul><li>向单元格传递数据的对象</li><li>滚动视图</li><li>单元格</li></ul><p>以上是必须实现的方法。</p><h3 id="相关脚本"><a href="#相关脚本" class="headerlink" title="相关脚本"></a>相关脚本</h3><p>定义用于将数据传递给单元格的对象。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyCellDto</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承FancyScrollView，实现自己的滚动视图。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> FancyScrollView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyScrollView</span> : <span class="title">FancyScrollView</span>&lt;<span class="title">MyCellDto</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    ScrollPositionController scrollPositionController;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.cellData = Enumerable.Range(<span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line">            .Select(i =&gt; <span class="keyword">new</span> MyCellDto &#123; Message = <span class="string">&quot;Cell &quot;</span> + i &#125;)</span><br><span class="line">            .ToList();</span><br><span class="line"></span><br><span class="line">        scrollPositionController.SetDataCount(<span class="keyword">base</span>.cellData.Count);</span><br><span class="line">        scrollPositionController.OnUpdatePosition(<span class="keyword">base</span>.UpdatePosition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承FancyScrollViewCell并实现自己的单元格</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">using</span> FancyScrollView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyScrollViewCell</span> : <span class="title">FancyScrollViewCell</span>&lt;<span class="title">MyCellDto</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    Text message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">UpdateContent</span>(<span class="params">MyCellDto itemData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        message.text = itemData.Message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">UpdatePosition</span>(<span class="params"><span class="built_in">float</span> position</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// position 是 0.0 ~ 1.0 的值</span></span><br><span class="line">        <span class="comment">// position 可以自由控制单元格的外观</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Inspector设置"><a href="#Inspector设置" class="headerlink" title="Inspector设置"></a>Inspector设置</h3><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-141547.jpg" alt="设置"></p><h4 id="My-Scroll-View"><a href="#My-Scroll-View" class="headerlink" title="My Scroll View"></a>My Scroll View</h4><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Cell Interval</td><td align="left">将单元格之间的间隔指定为 float.Epsilon ~ 1.0之间。</td></tr><tr><td align="left">Cell Offset</td><td align="left">指定单元格的偏移。例如，指定了0.5，在滚动位置为0的情况下，最初的单元格的位置是0.5。</td></tr><tr><td align="left">Loop</td><td align="left">开启后实现无限滚动。</td></tr><tr><td align="left">Cell Base</td><td align="left">指定单元格的Prefab。</td></tr><tr><td align="left">Cell Container</td><td align="left">指定单元格的父元素。</td></tr></tbody></table><h4 id="Scroll-Position-Controller"><a href="#Scroll-Position-Controller" class="headerlink" title="Scroll Position Controller"></a>Scroll Position Controller</h4><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Viewport</td><td align="left">指定作为视图窗口的RectTransform。在指定的RectTransform的范围内进行手势的检测。</td></tr><tr><td align="left">Direction Of Recognize</td><td align="left">将识别手势的方向指定为Vertical或Horisontal。</td></tr><tr><td align="left">Movement Type</td><td align="left">指定内容超过滚动范围的移动时使用的行为。</td></tr><tr><td align="left">Scroll Sensitivity</td><td align="left">指定滚动的灵敏度。</td></tr><tr><td align="left">Inertia</td><td align="left">指定惯性的打开/关闭。</td></tr><tr><td align="left">Deceleration Rate</td><td align="left">Inertia 只有在打开的情况下有效。指定减速率。</td></tr><tr><td align="left">Snap - Enable</td><td align="left">Snap 如果有效的话，请打开。</td></tr><tr><td align="left">Snap - Velocity Threshold</td><td align="left">指定Snap开始的阈值。</td></tr><tr><td align="left">Snap - Duration</td><td align="left">用秒数指定Snap时的移动时间。</td></tr><tr><td align="left">Data Count</td><td align="left">需要展示的数据总数量，一般从脚本内设置。</td></tr></tbody></table><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="即使数据的数量很多，展示也没有问题么？"><a href="#即使数据的数量很多，展示也没有问题么？" class="headerlink" title="即使数据的数量很多，展示也没有问题么？"></a>即使数据的数量很多，展示也没有问题么？</h3><p>因为单元格只生成显示所需的数量，所以数据件数对性能的影响很小。<br>比起数据的数量。每个单元格之间的间隔（同时存在的单元格的数量）和单元格的展示效果，对展示有一定影响。</p><h3 id="我能够自己控制滚动位置么？"><a href="#我能够自己控制滚动位置么？" class="headerlink" title="我能够自己控制滚动位置么？"></a>我能够自己控制滚动位置么？</h3><p>滚动的位置可以自由控制。可以将例子中使用的ScrollPositionController 更换成自己的实现。</p><h3 id="可以接收到在单元格中发生的事件么？"><a href="#可以接收到在单元格中发生的事件么？" class="headerlink" title="可以接收到在单元格中发生的事件么？"></a>可以接收到在单元格中发生的事件么？</h3><p>可以使用在单元格中发生的所有事件。<br>请参考例子（<a href="https://github.com/setchi/FancyScrollView/tree/master/Assets/FancyScrollView/Examples/02_CellEventHandling">Examples/02_CellEventHandling</a>）。</p><h3 id="能够使用单元格无限滚动么？"><a href="#能够使用单元格无限滚动么？" class="headerlink" title="能够使用单元格无限滚动么？"></a>能够使用单元格无限滚动么？</h3><p>对于使用无限滚动。步骤如下。</p><ol><li>将ScrollView 的「Loop」打开后，将单元格置于循环状态。</li><li>在使用例子中 ScrollPositionController 的情况下，将「Movement Type」设定为「Unrestricted」，就变成无限滚动了。</li></ol><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-141548.jpg" alt="设置"></p><p>请参考例子（<a href="https://github.com/setchi/FancyScrollView/tree/master/Assets/FancyScrollView/Examples/03_InfiniteScroll">Examples/03_InfiniteScroll</a>）。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>Unity 2017.2.0f3</p><h2 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h2><p>MIT</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FancyScrollView </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jekyll+Disqus 给个人博客添加评论</title>
      <link href="2018/06/26/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AE%BF%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
      <url>2018/06/26/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AE%BF%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我的博客是使用Jekyll搭建的，如果只具有展示博文的功能，阅读者就只能单纯的接受或者拒绝我的思想。<br>如果有评论呢？我一定会与阅读我博文的人产生思想的碰撞！</p></blockquote><h1 id="第一步：注册Disqus账号"><a href="#第一步：注册Disqus账号" class="headerlink" title="第一步：注册Disqus账号"></a>第一步：注册Disqus账号</h1><p>简单的注册过程</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-141537.jpg?x-oss-process=style/iPic" alt="简单的注册过程"></p><p>进入注册界面，进行注册</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-141538.jpg?x-oss-process=style/iPic" alt="注册"></p><h1 id="第二步：添加你的网站"><a href="#第二步：添加你的网站" class="headerlink" title="第二步：添加你的网站"></a>第二步：添加你的网站</h1><p>注册成功后，你会进入如下网站</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-141539.jpg?x-oss-process=style/iPic" alt="注册成功"></p><p>你需要设置两项内容</p><ul><li>Website Name：此项会显示在最终评论框的左上方位</li></ul><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-141540.jpg?x-oss-process=style/iPic" alt="设置"></p><ul><li>Shortname：用于_config.yml文件</li></ul><p>没看到这一项？你点击一下 <code>Customize Your URL</code> 就会出现。这就是你的 <code>disqus_shortname</code>，设置后不可更改。</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-141541.jpg?x-oss-process=style/iPic" alt="设置"></p><p>设置完成后进入下个页面，根据情况选择收费模式</p><h1 id="第三步：生成并添加JS代码"><a href="#第三步：生成并添加JS代码" class="headerlink" title="第三步：生成并添加JS代码"></a>第三步：生成并添加JS代码</h1><p>进入Install Disqus页面，由于我用的是github+jekyll的静态博客，所以选择 <code>universal code</code> 即基本JS代码</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-141542.jpg?x-oss-process=style/iPic" alt="添加JS代码"></p><p>将Disqus生成的代码复制到 <code>_includes</code> 的 <code>disqus_comments.html</code> 中，如果没有这个HTML文件，就自己建一个空的HTML并把代码粘贴进去</p><h1 id="第四步：修改-config-yml文件"><a href="#第四步：修改-config-yml文件" class="headerlink" title="第四步：修改_config.yml文件"></a>第四步：修改_config.yml文件</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="attr">shortname:</span> <span class="comment"># the Disqus shortname for the site</span></span><br></pre></td></tr></table></figure><h1 id="第五步：简单配置"><a href="#第五步：简单配置" class="headerlink" title="第五步：简单配置"></a>第五步：简单配置</h1><p>完成你的网站配置，在这里你可以进行一些设置来自定义你的评论样式</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-141543.jpg?x-oss-process=style/iPic" alt="网站配置"></p><h1 id="第六步：详细配置"><a href="#第六步：详细配置" class="headerlink" title="第六步：详细配置"></a>第六步：详细配置</h1><p>你已经完成了你的网站评论配置，如果你还想进一步配置，可以进入设置界面进行修改</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-24-141544.jpg?x-oss-process=style/iPic" alt="评论配置"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>推送你的网站库，就可以刷新你的博客查看效果了！</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jekyll </tag>
            
            <tag> Disqus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity3D 通过代码控制编译 XCode 工程</title>
      <link href="2018/06/22/PostProcessBuild%20%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>2018/06/22/PostProcessBuild%20%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在工作中遇到了一些集成 SDK 的问题，由于整个框架都是自动化的，所以 SDK 得集成也需要把所需的编译环境和启动代码写在 Unity 的脚本中。这两天也查找了很多资料，最终完成了集成，在这里记录一下过程和重点。</p></blockquote><h1 id="主要使用的方法"><a href="#主要使用的方法" class="headerlink" title="主要使用的方法"></a>主要使用的方法</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">iOSPostProcessBuild</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//该属性是在build完成后，被调用执行的</span></span><br><span class="line">    [<span class="meta">PostProcessBuild</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnPostprocessBuild</span>(<span class="params">BuildTarget buildTarget, <span class="built_in">string</span> pathToBuildProject</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (buildTarget != BuildTarget.iOS)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="built_in">string</span> projectPath = pathToBuildProject + <span class="string">&quot;/Unity-iPhone.xcodeproj/project.pbxproj&quot;</span>;</span><br><span class="line">        PBXProject pbxProj = <span class="keyword">new</span> PBXProject();</span><br><span class="line">        pbxProj.ReadFromFile(projectPath);</span><br><span class="line">        <span class="built_in">string</span> targetGuid = pbxProj.TargetGuidByName(<span class="string">&quot;Unity-iPhone&quot;</span>);</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">        <span class="comment">//保存所有修改</span></span><br><span class="line">        pbxProject.WriteToFile(projectPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>[PostProcessBuild]</code> 下的方法会在build完成之后被调用，在这个方法对 XCode 工程的编译选项和 plist 文件进行编辑。</p><p>对 XCode 的编译选项进行操作</p><p>需要引入 <code>UnityEditor.iOS.Xcode</code> 命名空间。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加flag</span></span><br><span class="line">pbxProj.AddBuildProperty(targetGuid, <span class="string">&quot;OTHER_LDFLAGS&quot;</span>, <span class="string">&quot;-ObjC&quot;</span>);</span><br><span class="line"><span class="comment">//关闭BitCode</span></span><br><span class="line">pbxProj.SetBuildProperty(targetGuid, <span class="string">&quot;ENABLE_BITCODE&quot;</span>, <span class="string">&quot;NO&quot;</span>);</span><br><span class="line"><span class="comment">//添加framwork</span></span><br><span class="line">pbxProj.AddFrameworkToProject(targetGuid, <span class="string">&quot;CFNetwork.framework&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//添加lib</span></span><br><span class="line">pbxProj.AddFileTobuild(targetGuid, pbxProj.AddFile(<span class="string">&quot;usr/lib/libsqlite3.tbd&quot;</span>, <span class="string">&quot;Frameworks/libsqlite3.tbd&quot;</span>, PBXSourceTree.Sdk));</span><br><span class="line"><span class="comment">//应用修改</span></span><br><span class="line">File.WriteAllText(projectPath, pbxProj.WriteToString());</span><br></pre></td></tr></table></figure><h1 id="修改Info-plist文件"><a href="#修改Info-plist文件" class="headerlink" title="修改Info.plist文件"></a>修改Info.plist文件</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> plistPath = Path.Combine(pathToBuildProject, <span class="string">&quot;Info.plist&quot;</span>);</span><br><span class="line">PlistDocument plist = <span class="keyword">new</span> PlistDocument();</span><br><span class="line">plist.ReadFromFile(plistPath);</span><br><span class="line">PlistElementDict rootDict = plist.root;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NSAppTransportSecurity</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> nsappKey = <span class="string">&quot;NSAppTransportSecurity&quot;</span>;</span><br><span class="line">PlistElementDict nsappDic;</span><br><span class="line">PlistElement nspel;</span><br><span class="line"><span class="keyword">if</span> (rootDict.values.TryGetValue(nsappKey, <span class="keyword">out</span> nspel))</span><br><span class="line">    nsappDic = nspel.AsDict();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    nsappDic = rootDict.CreateDict(nsappKey);</span><br><span class="line">nsappDic.SetBoolean(<span class="string">&quot;NSAllowsArbitraryLoads&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用修改</span></span><br><span class="line">File.WriteAllText(plistPath, plist.WriteToString());</span><br></pre></td></tr></table></figure><h1 id="修改OC代码"><a href="#修改OC代码" class="headerlink" title="修改OC代码"></a>修改OC代码</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">XCodeBuilder.XCodeEditor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">XCodeClass</span> : <span class="title">System.IDisposable</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> filePath;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">XCodeClass</span>(<span class="params"><span class="built_in">string</span> fPath</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            filePath = fPath;</span><br><span class="line">            <span class="keyword">if</span> (!System.IO.File.Exists(filePath))</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogError(filePath + <span class="string">&quot;路径下文件不存在&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteBelow</span>(<span class="params"><span class="built_in">string</span> below, <span class="built_in">string</span> text</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            StreamReader streamReader = <span class="keyword">new</span> StreamReader(filePath);</span><br><span class="line">            <span class="built_in">string</span> text_all = streamReader.ReadToEnd();</span><br><span class="line">            streamReader.Close();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> beginIndex = text_all.IndexOf(below);</span><br><span class="line">            <span class="keyword">if</span> (beginIndex == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogError(filePath + <span class="string">&quot;中没有找到标致&quot;</span> + below);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> endIndex = text_all.LastIndexOf(<span class="string">&quot;\n&quot;</span>, beginIndex + below.Length);</span><br><span class="line"></span><br><span class="line">            text_all = text_all.Substring(<span class="number">0</span>, endIndex) + <span class="string">&quot;\n&quot;</span> + text + <span class="string">&quot;\n&quot;</span> + text_all.Substring(endIndex);</span><br><span class="line"></span><br><span class="line">            StreamWriter streamWriter = <span class="keyword">new</span> StreamWriter(filePath);</span><br><span class="line">            streamWriter.Write(text_all);</span><br><span class="line">            streamWriter.Close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Replace</span>(<span class="params"><span class="built_in">string</span> below, <span class="built_in">string</span> newText</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            StreamReader streamReader = <span class="keyword">new</span> StreamReader(filePath);</span><br><span class="line">            <span class="built_in">string</span> text_all = streamReader.ReadToEnd();</span><br><span class="line">            streamReader.Close();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> beginIndex = text_all.IndexOf(below);</span><br><span class="line">            <span class="keyword">if</span> (beginIndex == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogError(filePath + <span class="string">&quot;中没有找到标致&quot;</span> + below);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            text_all = text_all.Replace(below, newText);</span><br><span class="line">            StreamWriter streamWriter = <span class="keyword">new</span> StreamWriter(filePath);</span><br><span class="line">            streamWriter.Write(text_all);</span><br><span class="line">            streamWriter.Close();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入代码</span></span><br><span class="line"><span class="comment">//读取UnityAppController.mm文件</span></span><br><span class="line"><span class="built_in">string</span> unityAppControllerPath = pathToBuildProject + <span class="string">&quot;/Classes/UnityAppController.mm&quot;</span>;</span><br><span class="line">XCodeClass UnityAppController = <span class="keyword">new</span> XCodeClass(unityAppControllerPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在指定代码后面增加一行代码</span></span><br><span class="line">UnityAppController.WriteBelow(<span class="string">&quot;指定代码&quot;</span>, <span class="string">&quot;需要添加的代码&quot;</span>);</span><br><span class="line"><span class="comment">//在指定代码后面增加一大行代码</span></span><br><span class="line"><span class="built_in">string</span> newCode = <span class="string">&quot;需\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;要\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;添\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;加\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;的\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;大段代码。&quot;</span>;</span><br><span class="line"></span><br><span class="line">UnityAppController.WriteBelow(<span class="string">&quot;指定代码&quot;</span>, newCode);</span><br></pre></td></tr></table></figure><h1 id="添加自定义类库"><a href="#添加自定义类库" class="headerlink" title="添加自定义类库"></a>添加自定义类库</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将库文件从Assets中拷贝到XCode工程中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CopyDirectory</span>(<span class="params"><span class="built_in">string</span> srcPath, <span class="built_in">string</span> dstPath, <span class="built_in">string</span>[] excludeExtensions, <span class="built_in">bool</span> overwrite = <span class="literal">true</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!Directory.Exists(dstPath))</span><br><span class="line">        Directory.CreateDirectory(dstPath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> file <span class="keyword">in</span> Directory.GetFiles(srcPath, <span class="string">&quot;*.*&quot;</span>, SearchOption.TopDirectoryOnly))</span><br><span class="line">    &#123;</span><br><span class="line">        File.Copy(file, Path.Combine(dstPath, Path.GetFileName(file)), overwrite);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> dir <span class="keyword">in</span> Directory.GetDirectories(srcPath))</span><br><span class="line">        CopyDirectory(dir, Path.Combine(dstPath, Path.GetFileName(dir)), excludeExtensions, overwrite);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 添加资源文件(中文路径 会导致 project.pbxproj 解析失败)</span></span><br><span class="line"><span class="built_in">string</span> frameworksPath = Application.dataPath + <span class="string">&quot;库文件所在的文件夹&quot;</span>;</span><br><span class="line"><span class="built_in">string</span>[] directories = Directory.GetDirectories(frameworksPath, <span class="string">&quot;*&quot;</span>, SearchOption.TopDirectoryOnly);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; directories.Length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> path = directories[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> name = path.Replace(frameworksPath + <span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> destDirName = pathToBuildProject + <span class="string">&quot;目标路径&quot;</span> + name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Directory.Exists(destDirName))</span><br><span class="line">        Directory.Delete(destDirName, <span class="literal">true</span>);</span><br><span class="line">  </span><br><span class="line">    Debug.Log(path + <span class="string">&quot; =&gt; &quot;</span> + destDirName);</span><br><span class="line">    CopyDirectory(path, destDirName, <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;.meta&quot;</span>, <span class="string">&quot;.framework&quot;</span>, <span class="string">&quot;.bundle&quot;</span>, <span class="string">&quot;.mm&quot;</span>, <span class="string">&quot;.c&quot;</span>, <span class="string">&quot;.m&quot;</span>, <span class="string">&quot;.h&quot;</span>, <span class="string">&quot;.xib&quot;</span>, <span class="string">&quot;.a&quot;</span>, <span class="string">&quot;.plist&quot;</span>, <span class="string">&quot;.org&quot;</span>, <span class="string">&quot;&quot;</span> &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> file <span class="keyword">in</span> Directory.GetFiles(destDirName, <span class="string">&quot;*.*&quot;</span>, SearchOption.AllDirectories))</span><br><span class="line">    &#123;</span><br><span class="line">        pbxProject.AddFileToBuild(targetGuid, pbxProject.AddFile(destDirName, <span class="string">&quot;目标路径&quot;</span> + name, PBXSourceTree.Sdk));</span><br><span class="line">        pbxProject.AddBuildProperty(targetGuid, <span class="string">&quot;FRAMEWORK_SEARCH_PATHS&quot;</span>, <span class="string">&quot;$(SRCROOT)&quot;</span> + <span class="string">&quot;目标路径&quot;</span>);</span><br><span class="line">        pbxProject.AddBuildProperty(targetGuid, <span class="string">&quot;HEADER_SEARCH_PATHS&quot;</span>, <span class="string">&quot;$(SRCROOT)&quot;</span> + <span class="string">&quot;目标路径&quot;</span>);</span><br><span class="line">        pbxProject.AddBuildProperty(targetGuid, <span class="string">&quot;LIBRARY_SEARCH_PATHS&quot;</span>, <span class="string">&quot;$(SRCROOT)&quot;</span> + <span class="string">&quot;目标路径&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git LFS 误操作解决办法</title>
      <link href="2018/06/22/%E5%AE%8C%E4%BA%86%EF%BC%81%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90%E6%8F%90%E4%BA%A4%E9%94%99%E4%BA%86%EF%BC%81/"/>
      <url>2018/06/22/%E5%AE%8C%E4%BA%86%EF%BC%81%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90%E6%8F%90%E4%BA%A4%E9%94%99%E4%BA%86%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们使用的是Git+Git lfs 的工程管理，由于对业务不太熟悉，在添加文件时，不小心跳过lfs过程提交了一个大文件，经过同事的指导，终于修复了这个问题，在这里记录一下。<br>如果你也遇到了同样的问题，希望这对你有一个帮助。</p></blockquote><h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><p>假设，文件<code>a.x</code>是误提交的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找到a.x是在哪个提交添加的</span></span><br><span class="line">$ git <span class="built_in">log</span> <span class="string">&#x27;a.x的path&#x27;</span></span><br><span class="line"><span class="comment">#rebase这次提交</span></span><br><span class="line">$ git rebase -i <span class="string">&#x27;hash^&#x27;</span></span><br><span class="line"><span class="comment">#在编辑器中将hash的pick改成edit，然后保存退出，rm 文件，执行lfs，add，commit</span></span><br><span class="line">$ git rm --cached <span class="string">&#x27;a.x的path&#x27;</span></span><br><span class="line">$ git lfs track <span class="string">&#x27;a.x的path&#x27;</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git commit --amend</span><br><span class="line"><span class="comment">#结束rebase</span></span><br><span class="line">$ git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p>到此为止，你的文件已经成功的被lfs管理了。</p><p><strong>注意：在 <code>rebase --continue</code> 的过程中，有可能会产生 <code>.gitattributes</code> 文件的冲突，请解决冲突后，继续执行 <code>rebase --continue</code> 即可。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Git LFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 6.0 本质论 读书笔记</title>
      <link href="2018/06/14/Csharp%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%AD%A6%E8%B5%B7/"/>
      <url>2018/06/14/Csharp%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%AD%A6%E8%B5%B7/</url>
      
        <content type="html"><![CDATA[<blockquote></blockquote><p>最近开始学习《C# 6.0本质论》这本书，已经学习了大概4章的样子，在这里把前两章中，学习到的、开发工程中没有注意到的或者以前没有关心过的知识点总结一下。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="标识符规范"><a href="#标识符规范" class="headerlink" title="标识符规范"></a>标识符规范</h2><ol><li><strong>要</strong> 更注重标识符的清晰 <strong>而不是简短</strong> 。</li><li><strong>不要</strong> 在标识符名称中使用单词缩写。</li><li><strong>不要</strong> 使用不被广泛接受的首字母缩写词， <strong>即使被广泛接受，非必要时也不要用</strong> 。</li><li><strong>要</strong> 把 <strong>只包含两个字母</strong> 的首字母缩写 <strong>全部大写</strong> ，除非是驼峰大小写风格的第一个单词。</li></ol><h2 id="类名规范"><a href="#类名规范" class="headerlink" title="类名规范"></a>类名规范</h2><ol><li><strong>要</strong> 使用名词或名词短语命名类。</li><li><strong>要</strong> 为所有类名使用 <strong>Pascal</strong> 大小写风格。</li></ol><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><p>浮点数的精度是可变的。除非用分数表示时分母恰好是 <strong>2的整数次幂</strong> ，否则用二进制浮点类型无法准确的表示该数。浮点数的精度与它所代表的数字的大小成正比。准确的说， <strong>浮点数的精度由有效数字的个数决定</strong> 。</p><p><strong>decimal：</strong> 与浮点数不同，decimal类型保证范围内的所有十进制数都是精确的。</p><h2 id="字面量规范："><a href="#字面量规范：" class="headerlink" title="字面量规范："></a>字面量规范：</h2><p><strong>要</strong> 使用大写的字面量后缀（如1.618033988749895M）</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="逐字字符串字面量"><a href="#逐字字符串字面量" class="headerlink" title="逐字字符串字面量"></a>逐字字符串字面量</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Triangle</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.Console.Write(<span class="string">@&quot;begin</span></span><br><span class="line"><span class="string">            /\</span></span><br><span class="line"><span class="string">           /  \</span></span><br><span class="line"><span class="string">          /    \</span></span><br><span class="line"><span class="string">         /      \</span></span><br><span class="line"><span class="string">        /________\</span></span><br><span class="line"><span class="string">        end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">begin</span><br><span class="line">            /\</span><br><span class="line">           /  \</span><br><span class="line">          /    \</span><br><span class="line">         /      \</span><br><span class="line">        /________\</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine(<span class="string">$&quot;Your full name is <span class="subst">&#123;firstName&#125;</span> <span class="subst">&#123;lastName&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="字符串是不可变的"><a href="#字符串是不可变的" class="headerlink" title="字符串是不可变的"></a>字符串是不可变的</h3><p>如果有大量字符串需要修改，应当使用数据类型 <code>System.Text.StringBuilder</code>。<code>System.Text.StringBuilder</code> 包含 <code>Append()</code>、<code>AppendFormat()</code>、<code>Insert()</code>、<code>Remove()</code> 和 <code>Replace()</code> 等方法。</p><h2 id="null和void"><a href="#null和void" class="headerlink" title="null和void"></a>null和void</h2><p>null值由关键字null标识，表明变量不引用任何有效的对象。void表示没有类型，或者没有任何值。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 操作指南(详)</title>
      <link href="2018/04/13/Git%20%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97%EF%BC%88%E8%AF%A6%EF%BC%89/"/>
      <url>2018/04/13/Git%20%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97%EF%BC%88%E8%AF%A6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="SVN-与-Git-的最主要的区别"><a href="#SVN-与-Git-的最主要的区别" class="headerlink" title="SVN 与 Git 的最主要的区别:"></a>SVN 与 Git 的最主要的区别:</h1><p>SVN 是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p><p>Git 是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件 A，其他人也在电脑上改了文件 A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><h1 id="Git-的可视化工具"><a href="#Git-的可视化工具" class="headerlink" title="Git 的可视化工具"></a>Git 的可视化工具</h1><p>所需工具: SourceTree<br>下载地址: <a href="https://downloads.atlassian.com/software/sourcetree/windows/ga/SourceTreeSetup-2.4.8.0.exe">Windows</a> \ <a href="https://downloads.atlassian.com/software/sourcetree/Sourcetree_2.7.1d.zip">Mac</a></p><h1 id="GitFlow-工作流常用操作流程"><a href="#GitFlow-工作流常用操作流程" class="headerlink" title="GitFlow 工作流常用操作流程"></a>GitFlow 工作流常用操作流程</h1><h2 id="1-主要分支介绍"><a href="#1-主要分支介绍" class="headerlink" title="1. 主要分支介绍"></a>1. 主要分支介绍</h2><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-WechatIMG37.png?x-oss-process=style/iPic"></p><h3 id="1-1-master-分支"><a href="#1-1-master-分支" class="headerlink" title="1.1 master 分支"></a>1.1 master 分支</h3><p>主分支，产品的功能全部实现后，最终在 master 分支对外发布。</p><h3 id="1-2-develop-分支"><a href="#1-2-develop-分支" class="headerlink" title="1.2 develop 分支"></a>1.2 develop 分支</h3><p>开发分支，基于 master 分支克隆，产品的编码工作在此分支进行。</p><h3 id="1-3-release-分支"><a href="#1-3-release-分支" class="headerlink" title="1.3 release 分支"></a>1.3 release 分支</h3><p>测试分支，基于 delevop 分支克隆，产品编码工作完成后，发布到本分支测试，测试过程中发现的小 bug 直接在本分支进行修复，修复完成后合并到 develop 分支。本分支属于临时分支，目的实现后可删除分支。</p><h3 id="1-4-hotfix-分支"><a href="#1-4-hotfix-分支" class="headerlink" title="1.4 hotfix 分支"></a>1.4 hotfix 分支</h3><p>Bug 修复分支，基于 master 分支或发布的里程碑 Tag 克隆，主要用于修复对外发布的分支，收到客户的 Bug 反馈后，在此分支进行修复，修复完毕后分别合并到 develop 分支和 master 分支。本分支属于临时分支，目的实现后可删除分支。</p><h3 id="1-5-feature-分支"><a href="#1-5-feature-分支" class="headerlink" title="1.5 feature 分支"></a>1.5 feature 分支</h3><p>功能特征分支，基于 develop 分支克隆，主要用于多人协助开发场景或探索性功能验证场景，功能开发完毕后合并到 develop 分支。feature 分支可创建多个，属于临时分支，目的实现后可删除分支。</p><h2 id="2-新功能开发工作流"><a href="#2-新功能开发工作流" class="headerlink" title="2. 新功能开发工作流"></a>2. 新功能开发工作流</h2><h3 id="2-1-切换到本地仓库工作区"><a href="#2-1-切换到本地仓库工作区" class="headerlink" title="2.1 切换到本地仓库工作区"></a>2.1 切换到本地仓库工作区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/timerhunter/workspace</span><br></pre></td></tr></table></figure><h3 id="2-2-从远程仓库克隆代码到本地仓库"><a href="#2-2-从远程仓库克隆代码到本地仓库" class="headerlink" title="2.2 从远程仓库克隆代码到本地仓库"></a>2.2 从远程仓库克隆代码到本地仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> https://xxxx@localhost:8443/r/valve/V5‐</span></span><br><span class="line">Lora.$git</span><br></pre></td></tr></table></figure><h3 id="2-3-基于-master-分支，创建-develop-分支"><a href="#2-3-基于-master-分支，创建-develop-分支" class="headerlink" title="2.3 基于 master 分支，创建 develop 分支"></a>2.3 基于 master 分支，创建 develop 分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* 切换到 master 分支 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout master</span></span><br><span class="line">/* 基于 master 分支克隆 develop 分支，并在克隆完毕后直接跳转到 develop 分支 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout ‐b develop</span></span><br><span class="line">/* 推送 develop 分支到远程仓库 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git push origin develop</span></span><br></pre></td></tr></table></figure><p><strong>注:编码工作主要在 develop 分支，master 分支主要用来发布稳定版本</strong></p><h3 id="2-4-在本地仓库的开发流程"><a href="#2-4-在本地仓库的开发流程" class="headerlink" title="2.4 在本地仓库的开发流程"></a>2.4 在本地仓库的开发流程</h3><p>完成一个功能点或者一天的工作结束时，将代码提交到本地仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 提交修改到缓冲区 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git add .</span></span><br><span class="line">/* 提交修改到本地仓库 */</span><br><span class="line">/* 如果是修复的 BUG，应该在修改说明的最开始添加 Bug#ID，多个 Bug 用逗号分隔，例如 Bug#002,003 */</span><br><span class="line">/* 如果是完成了一个指派的任务，应该在修改说明的最开始添加 Task#TaskID,例如 Task#165 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git commit ‐m <span class="string">&quot;Bug#123 修改说明&quot;</span></span></span><br><span class="line">/* 每完成一个功能点可以对代码进行打包 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git tag ‐m <span class="string">&quot;简要说明增加/修复/删除了什么功能&quot;</span> v0.0.0.170718</span></span><br></pre></td></tr></table></figure><p><strong>注:不是每一个Tag都需要提交到远程仓库，比如可以在完成一个功能点的编码工作后未编译就打一个包，仅存储于本地仓库，在编译成功&amp;测试通过后，再打一个新的Tag包(里程碑Tag包)，仅将里程碑Tag包推送到远程仓库</strong></p><h3 id="2-5-推送代码到远程仓库"><a href="#2-5-推送代码到远程仓库" class="headerlink" title="2.5 推送代码到远程仓库"></a>2.5 推送代码到远程仓库</h3><p>当完成一个功能点或阶段工作时，将代码推送到远程仓库 develop 分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 执行代码拉取操作，防止代码冲突 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git pull</span></span><br><span class="line">/* 解决代码冲突后，推送代码到远程仓库 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git push origin develop</span></span><br></pre></td></tr></table></figure><p><strong>注:禁止将未编译或编译不通过的代码提交到远程仓库，如果编码工作进行未完成可以提交到本地仓库中，等待该功能点全部实现后再将代码推送到远程仓库中。</strong></p><h3 id="2-6-将代码发布到测试分支"><a href="#2-6-将代码发布到测试分支" class="headerlink" title="2.6 将代码发布到测试分支"></a>2.6 将代码发布到测试分支</h3><p>阶段性的开发工作已完成，启动小批量测试工作，将代码发布到测试分支 release</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git checkout develop</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout ‐b release</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push origin release</span></span><br></pre></td></tr></table></figure><h3 id="2-7-测试工程师提交-Bug-后修复"><a href="#2-7-测试工程师提交-Bug-后修复" class="headerlink" title="2.7 测试工程师提交 Bug 后修复"></a>2.7 测试工程师提交 Bug 后修复</h3><ul><li>从远程仓库拉取代码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* 克隆仓库 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> https://admin@192.168.1.88:8443/r/admin/<span class="built_in">test</span>.<span class="variable">$git</span></span></span><br><span class="line">/* 查看远程仓库分支情况：克隆仓库时只能克隆 master 分支，因此需要拉取指定分支，我们使用 $git branch ‐r 查看远程分支情况 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git branch ‐r</span></span><br><span class="line">  origin/HEAD‐&gt;origin/master</span><br><span class="line">  origin/dev</span><br><span class="line">  origin/master</span><br><span class="line">  origin/release</span><br><span class="line">/* 拉取测试分支 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout ‐b release origin/release</span></span><br></pre></td></tr></table></figure><ul><li>修复流程同 #2.4，#2.5;</li><li>注意在 $git commit 时的修复说明中添加 Bug#BugID 关键字</li><li>完成一个 Bug 修复或完成阶段性工作后，将代码推送到远程分支</li></ul><h3 id="2-8-测试工作完成后，合并代码到-develop-分支"><a href="#2-8-测试工作完成后，合并代码到-develop-分支" class="headerlink" title="2.8 测试工作完成后，合并代码到 develop 分支"></a>2.8 测试工作完成后，合并代码到 develop 分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* 切换到 develop 分支 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout develop</span></span><br><span class="line">/* 执行合并操作,将 release 分支代码合并到 develop 分支 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git merge release</span></span><br><span class="line">/* 如果合并报错，则解决冲突，冲突解决后继续再次执行合并 */</span><br></pre></td></tr></table></figure><h3 id="2-9-开发工作和测试工作都完毕后，发布时将-develop-分支合并到主线"><a href="#2-9-开发工作和测试工作都完毕后，发布时将-develop-分支合并到主线" class="headerlink" title="2.9 开发工作和测试工作都完毕后，发布时将 develop 分支合并到主线"></a>2.9 开发工作和测试工作都完毕后，发布时将 develop 分支合并到主线</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git checkout master</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git merge develop</span></span><br></pre></td></tr></table></figure><h3 id="2-10-阶段开发完毕，打一个里程碑-Tag-包"><a href="#2-10-阶段开发完毕，打一个里程碑-Tag-包" class="headerlink" title="2.10 阶段开发完毕，打一个里程碑 Tag 包"></a>2.10 阶段开发完毕，打一个里程碑 Tag 包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 创建里程碑 Tag */</span><br><span class="line"><span class="meta">$</span><span class="bash">git tag ‐m <span class="string">&quot;Task#003 v1.0.0 首版发布&quot;</span> v1.0.0.170718</span></span><br><span class="line">/* 推送里程碑 Tag 到远程仓库 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git push origin v1.0.0.170718</span></span><br></pre></td></tr></table></figure><h2 id="3-发布后的产品-Bug-修复工作流"><a href="#3-发布后的产品-Bug-修复工作流" class="headerlink" title="3. 发布后的产品 Bug 修复工作流"></a>3. 发布后的产品 Bug 修复工作流</h2><h3 id="3-1-获取-Bug-产品的软件发布版本号"><a href="#3-1-获取-Bug-产品的软件发布版本号" class="headerlink" title="3.1 获取 Bug 产品的软件发布版本号"></a>3.1 获取 Bug 产品的软件发布版本号</h3><h3 id="3-2-查找里程碑-Tag"><a href="#3-2-查找里程碑-Tag" class="headerlink" title="3.2 查找里程碑 Tag"></a>3.2 查找里程碑 Tag</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* 查询里程碑及其提交说明 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git tag ‐n1 ‐l v*</span></span><br></pre></td></tr></table></figure><h3 id="3-3-基于里程碑-Tag-创建分支"><a href="#3-3-基于里程碑-Tag-创建分支" class="headerlink" title="3.3 基于里程碑 Tag 创建分支"></a>3.3 基于里程碑 Tag 创建分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* git checkout ‐b [创建的分支名称] [里程碑 Tag 名称] */</span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout ‐b hotfix -v1.0.0.170718 v1.0.0.170718</span></span><br></pre></td></tr></table></figure><h3 id="3-4-修复代码后可以查询修改过的地方"><a href="#3-4-修复代码后可以查询修改过的地方" class="headerlink" title="3.4 修复代码后可以查询修改过的地方"></a>3.4 修复代码后可以查询修改过的地方</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git diff</span></span><br></pre></td></tr></table></figure><h3 id="3-5-修复完毕后分别合并到-develop-分支和-master-分支"><a href="#3-5-修复完毕后分别合并到-develop-分支和-master-分支" class="headerlink" title="3.5 修复完毕后分别合并到 develop 分支和 master 分支"></a>3.5 修复完毕后分别合并到 develop 分支和 master 分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* 合并到 develop */</span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout develop</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git merge hotfix ‐v1.0.0.170718</span></span><br><span class="line">/* 提交到远程仓库 develop 分支 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git push origin develop</span></span><br><span class="line">/* 合并到 master：如果随下一个版本再发布，可不用合并至 master 分支*/</span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout master</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git merge develop</span></span><br><span class="line">/* 提交到远程仓库 master 分支 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git push origin master</span></span><br></pre></td></tr></table></figure><h3 id="3-6-创建新的里程碑-Tag"><a href="#3-6-创建新的里程碑-Tag" class="headerlink" title="3.6 创建新的里程碑 Tag"></a>3.6 创建新的里程碑 Tag</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git tag ‐m <span class="string">&quot;Bug#002 修复某某 Bug&quot;</span> v1.0.1.170719</span></span><br><span class="line">/* 推送到远程仓库 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git push origin v1.0.1.170719</span></span><br></pre></td></tr></table></figure><h3 id="3-7-删除-hotfix-分支"><a href="#3-7-删除-hotfix-分支" class="headerlink" title="3.7 删除 hotfix 分支"></a>3.7 删除 hotfix 分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 删除本地分支‐$git branch ‐d [本地分支名] */</span><br><span class="line"><span class="meta">$</span><span class="bash">git branch ‐d hotfix ‐v1.0.0.170718</span></span><br><span class="line">/* 删除远程分支‐$git push origin :[远程分支名] */</span><br><span class="line"><span class="meta">$</span><span class="bash">git push origin :hotfix ‐v1.0.0.170718</span></span><br></pre></td></tr></table></figure><h2 id="4-日常开发过程中常用操作"><a href="#4-日常开发过程中常用操作" class="headerlink" title="4. 日常开发过程中常用操作"></a>4. 日常开发过程中常用操作</h2><h3 id="4-1-撤销操作"><a href="#4-1-撤销操作" class="headerlink" title="4.1 撤销操作"></a>4.1 撤销操作</h3><h4 id="4-1-1-提交后发现丢了几个文件没有提交"><a href="#4-1-1-提交后发现丢了几个文件没有提交" class="headerlink" title="4.1.1 提交后发现丢了几个文件没有提交"></a>4.1.1 提交后发现丢了几个文件没有提交</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* 正常提交 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git commit ‐m <span class="string">&quot;发布 v1.0&quot;</span></span></span><br><span class="line">/* 发现丢了修改记录，重新添加 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git add CHANGELOG.md</span></span><br><span class="line">/* 重新提交,仍以 &quot;发布 v1.0 的名义提交&quot;，最终只有一个提交 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git commit ‐‐amend</span></span><br></pre></td></tr></table></figure><h4 id="4-1-2-撤销上一次的提交，但是保留暂存区和当前修改不变"><a href="#4-1-2-撤销上一次的提交，但是保留暂存区和当前修改不变" class="headerlink" title="4.1.2 撤销上一次的提交，但是保留暂存区和当前修改不变"></a>4.1.2 撤销上一次的提交，但是保留暂存区和当前修改不变</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 正常提交 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git commit ‐m <span class="string">&quot;发布 v1.0&quot;</span></span></span><br><span class="line">/* 将会撤销 “发布 v1.0” 的提交，但是保留暂存区和当前目录中文件的修改 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git reset ‐‐soft HEAD~</span></span><br></pre></td></tr></table></figure><h4 id="4-1-3-撤销上一次的提交和暂存区修改，仅保留当前修改不变"><a href="#4-1-3-撤销上一次的提交和暂存区修改，仅保留当前修改不变" class="headerlink" title="4.1.3 撤销上一次的提交和暂存区修改，仅保留当前修改不变"></a>4.1.3 撤销上一次的提交和暂存区修改，仅保留当前修改不变</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 正常提交 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git commit ‐m <span class="string">&quot;发布 v1.0&quot;</span></span></span><br><span class="line">/* 将会撤销 “发布 v1.0” 的提交，但是保留暂存区和当前目录中文件的修改 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git reset ‐‐mixed HEAD~</span></span><br></pre></td></tr></table></figure><h4 id="4-1-4-撤销上一次的提交，并丢弃所有修改，包括暂存区和当前目录中的修改，整体回档到上上次的提交"><a href="#4-1-4-撤销上一次的提交，并丢弃所有修改，包括暂存区和当前目录中的修改，整体回档到上上次的提交" class="headerlink" title="4.1.4 撤销上一次的提交，并丢弃所有修改，包括暂存区和当前目录中的修改，整体回档到上上次的提交"></a>4.1.4 撤销上一次的提交，并丢弃所有修改，包括暂存区和当前目录中的修改，整体回档到上上次的提交</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 正常提交 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git commit ‐m <span class="string">&quot;发布 v1.0&quot;</span></span></span><br><span class="line">/* 将会撤销 “发布 v1.0” 的提交，但是保留暂存区和当前目录中文件的修改 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git reset ‐‐hard HEAD~</span></span><br></pre></td></tr></table></figure><h4 id="4-1-5-撤销暂存区和当前目录下所有文件的修改，整体回档到上一次提交"><a href="#4-1-5-撤销暂存区和当前目录下所有文件的修改，整体回档到上一次提交" class="headerlink" title="4.1.5 撤销暂存区和当前目录下所有文件的修改，整体回档到上一次提交"></a>4.1.5 撤销暂存区和当前目录下所有文件的修改，整体回档到上一次提交</h4><p><strong>注意:此操作非常危险，会丢失所有修改，直接整体回档到指定的版本，谨慎使用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* 正常提交 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git commit ‐m <span class="string">&quot;发布 v1.0&quot;</span></span></span><br><span class="line">/* 修改多个文件 */</span><br><span class="line">/* 添加到暂存区 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git add.</span></span><br><span class="line">/* 撤销暂存区和本地目录下所有文件的修改，并整体回档到上一次提交的状态 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git reset ‐‐hard HEAD</span></span><br><span class="line">/* 可以修改 HEAD 为 SHA‐1 值回档到任意版本 */</span><br><span class="line">/* 使用 gitlog 查看每次提交的 SHA‐1 值，可以仅指定前7位 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git reset ‐‐hard 745d8cd</span></span><br></pre></td></tr></table></figure><h4 id="4-1-6-将文件提交到暂存区后撤回在对文件执行-git-add-操作后，重新撤回"><a href="#4-1-6-将文件提交到暂存区后撤回在对文件执行-git-add-操作后，重新撤回" class="headerlink" title="4.1.6 将文件提交到暂存区后撤回在对文件执行 git add 操作后，重新撤回"></a>4.1.6 将文件提交到暂存区后撤回在对文件执行 git add 操作后，重新撤回</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 添加文件到暂存区 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git add README</span></span><br><span class="line">/* 将文件从暂存区撤回 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git reset HEAD README</span></span><br></pre></td></tr></table></figure><h4 id="4-1-7-撤销对文件的修改在对文件进行修改后，发现思路不对，需要将文件恢复至原有状态"><a href="#4-1-7-撤销对文件的修改在对文件进行修改后，发现思路不对，需要将文件恢复至原有状态" class="headerlink" title="4.1.7 撤销对文件的修改在对文件进行修改后，发现思路不对，需要将文件恢复至原有状态"></a>4.1.7 撤销对文件的修改在对文件进行修改后，发现思路不对，需要将文件恢复至原有状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* 撤销对 CHANGELOG.md 文件的修改，请注意这是一个危险的命令，对指定文件的修改都会被取消，会还原成上次提交的样 */</span><br><span class="line"><span class="meta">$</span><span class="bash">git checkout ‐‐ CHANGELOG.md</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SourceTree操作指南</title>
      <link href="2018/04/13/SourceTree%20%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97%EF%BC%88%E8%AF%A6%EF%BC%89/"/>
      <url>2018/04/13/SourceTree%20%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97%EF%BC%88%E8%AF%A6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="SourceTree-是什么"><a href="#SourceTree-是什么" class="headerlink" title="SourceTree 是什么"></a>SourceTree 是什么</h1><p>拥有可视化界面的项目版本控制软件，适用于git项目管理Windows、Mac可用</p><p>下载地址：<a href="https://downloads.atlassian.com/software/sourcetree/windows/ga/SourceTreeSetup-2.4.8.0.exe">Windows</a> \ <a href="https://downloads.atlassian.com/software/sourcetree/Sourcetree_2.7.1d.zip">Mac</a></p><h1 id="获取项目代码"><a href="#获取项目代码" class="headerlink" title="获取项目代码"></a>获取项目代码</h1><h2 id="点击克隆-新建"><a href="#点击克隆-新建" class="headerlink" title="点击克隆/新建"></a>点击克隆/新建</h2><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com.jpg?x-oss-process=style/iPic"></p><h2 id="在弹出框中输入项目地址，http-或者-ssh-地址都可以"><a href="#在弹出框中输入项目地址，http-或者-ssh-地址都可以" class="headerlink" title="在弹出框中输入项目地址，http 或者 ssh 地址都可以"></a>在弹出框中输入项目地址，http 或者 ssh 地址都可以</h2><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-1.jpg?x-oss-process=style/iPic"></p><p>如果箭头指向的仓库类型表明“这不是一个标准的Git仓库”，可能是有以下原因：</p><p>项目地址获取错误没有项目访问权限</p><h2 id="点击“克隆”，等待项目克隆完成，完成后，左侧只有一个分支-master"><a href="#点击“克隆”，等待项目克隆完成，完成后，左侧只有一个分支-master" class="headerlink" title="点击“克隆”，等待项目克隆完成，完成后，左侧只有一个分支 master"></a>点击“克隆”，等待项目克隆完成，完成后，左侧只有一个分支 master</h2><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-2.jpg?x-oss-process=style/iPic"></p><p>克隆完成后，得到的是发布后的 master 源码，如果想要获取最新的正在开发中的源码，需要对项目流进行初始化，点击“Git工作流”</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-3.jpg?x-oss-process=style/iPic"></p><p>直接点“确定”，获取 develop 分支源码</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-4.jpg?x-oss-process=style/iPic"></p><p><strong>开发任务都是在develop分支上完成的</strong></p><h1 id="Git‐ﬂow-工作流"><a href="#Git‐ﬂow-工作流" class="headerlink" title="Git‐ﬂow 工作流"></a>Git‐ﬂow 工作流</h1><h2 id="分支共有5种类型"><a href="#分支共有5种类型" class="headerlink" title="分支共有5种类型"></a>分支共有5种类型</h2><ul><li>master，最终发布版本，整个项目中有且只有一个</li><li>develop，项目的开发分支，原则上项目中有且只有一个</li><li>feature，功能分支，用于开发一个新的功能</li><li>release，预发布版本，介于 develop 和 master 之间的一个版本，主要用于测试</li><li>hotfix，修复补丁，用于修复 master 上的 bug，直接作用于 master</li></ul><p>master 和 develop 上文中已介绍过，当开发中需要增加一个新的功能时，可新建 feature 分支，用于增加新功能，并且不影响开发中的 develop 源码，当新功能增加完成后，完成 feature 分支，将新功能合并到 develop 中，更新 develop 上的代码</p><h3 id="feature-分支（新功能开发）"><a href="#feature-分支（新功能开发）" class="headerlink" title="feature 分支（新功能开发）"></a>feature 分支（新功能开发）</h3><p>首先当前开发分支指向 develop，点击“Git工作流”，</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-5.jpg?x-oss-process=style/iPic"></p><p>选择“建立新的功能”</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-7.jpg?x-oss-process=style/iPic"></p><p>在预览中可看到，feature 分支是从 develop 分出的，输入功能名称，点击确定，项目结构中增加 feature 分支，并且当前开发分支指向新建的<br>feature 分支</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-8.jpg?x-oss-process=style/iPic"></p><p>在<code>F_add_feature</code>分支下进行开发任务，并提交</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-9.jpg?x-oss-process=style/iPic"></p><p>以上操作共提交3次，现项目文件夹下共三个文件</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-10.jpg?x-oss-process=style/iPic"></p><p>当切换为 develop 分支后，会发现，在 develop 下并没有新增的三个文件，说明在 feature 下进行操作，并不影响 develop 分支源码</p><p>完成 feature 开发后，将 feature 中的源码合并到 develop 分支。将当前分支指向<code>F_add_feature</code>分支，点击“Git工作流”，选择“完成功能”</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-11.jpg?x-oss-process=style/iPic"><br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-12.jpg?x-oss-process=style/iPic"></p><p>预览中，表明 feature 分支将合并到 develop，点击确定，进行提交合并，合并成功后</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-13.jpg?x-oss-process=style/iPic"></p><p>需要再增加新的功能时，重复以上操作即可</p><p>当多人协作开发时，可能会出现，不同人员对同一文件进行操作，从而引起合并冲突，对这种情况进行模拟，在当前新建两个 feature，分别对 feature_1.txt 文件进行修改，然后分别合并</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-14.jpg?x-oss-process=style/iPic"></p><p>feature_1 在 feature_1.txt 下做如下操作</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-15.jpg?x-oss-process=style/iPic"></p><p>feature_2 在 feature_1.txt 下做如下操作</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-16.jpg?x-oss-process=style/iPic"></p><p>先后合并<code>F_feature_1</code>和<code>F_feature_2</code>，会出现冲突</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-17.jpg?x-oss-process=style/iPic"></p><p>点击”关闭“，查看未提交的更改，提示 feature_1.txt 出现冲突</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-18.jpg?x-oss-process=style/iPic"></p><p>打开 feature_1.txt</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-19.jpg?x-oss-process=style/iPic"></p><p>出现<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>、<code>=======</code> 、<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;feature/F_feature_2</code>，<code>HEAD</code>和<code>=====</code>之间表示当前分支下的代码，<code>=====</code>和<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature/F_feature_2</code>之间表示要合并的分支下的代码，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature/F_feature_2</code>表示了要合并的分支的分支名称，根据情况区分要保留的代码，要删除的代码，最后再删除<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>、<code>=======</code>、<code>和&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature/F_feature_2</code></p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-20.jpg?x-oss-process=style/iPic"></p><p>将修改的代码再进行一次提交</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-21.jpg?x-oss-process=style/iPic"></p><p>一旦出现 feature 合并冲突，要合并的 feature 分支不会被删除，如<code>F_feature_2</code>，确保合并没有问题后，可手动删除<code>F_feature_2</code></p><h3 id="release分支（准备发布新版本）"><a href="#release分支（准备发布新版本）" class="headerlink" title="release分支（准备发布新版本）"></a>release分支（准备发布新版本）</h3><p>当开发到一定阶段，可以发布测试版本时，可以从 develop 分支，建立 release 分支，进入预发布测试阶段。点击“Git工作流”，选择“建立新的发布版本”</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-22.jpg?x-oss-process=style/iPic"><br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-23.jpg?x-oss-process=style/iPic"></p><p>预览中可以看到，release 是从 develop 分出的，输入发布版本名‘R_v1.0’，点击确定</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-24.jpg?x-oss-process=style/iPic"></p><p>R_v1.0 为阶段性发布版本，主要用于发布前进行测试，后续的开发工作仍旧在 develop 上进行，如果在测试过程中发现问题，直接在 release  上进行修改，修改完成后进行提交</p><p>对 release 分支 R_v1.0 进行两次修改后，测试完成，可以进行正式发布，在当前分支指向 R_v1.0 分支下，点击“Git工作流”，选择“完成发布版本”</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-25.jpg?x-oss-process=style/iPic"><br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-26.jpg?x-oss-process=style/iPic"></p><p>在预览中可以看到，R_v1.0 向 develop 和 master 分别合并，点击确定，完成正式发布</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-27.jpg?x-oss-process=style/iPic"></p><p>完成合并后，默认指向 develop 为当前分支，master 增加多个版本更新，将 master 分支推送到 origin，完成线上发布</p><h3 id="hotfix分支（修复补丁）"><a href="#hotfix分支（修复补丁）" class="headerlink" title="hotfix分支（修复补丁）"></a>hotfix分支（修复补丁）</h3><p>正式版本发布后，develop 可继续进行后续开发，当正式版本出现问题时，需要进行问题的修改，可以在 master 分支建立修改补丁 hotfix</p><p>将当前分支切换到 master，点击“Git工作流”，选择“建立新的修复补丁”</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-28.jpg?x-oss-process=style/iPic"><br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-29.jpg?x-oss-process=style/iPic"></p><p>预览中 hotfix 分支是从 master 拉去出来的，输入修复补丁名，点确定</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-30.jpg?x-oss-process=style/iPic"></p><p>在该分支下进行 master 的问题修改，修改完成后进行提交。当所有补丁问题修改完成后，点击“Git工作流”，选择“完成修复补丁”</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-31.jpg?x-oss-process=style/iPic"><br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-32.jpg?x-oss-process=style/iPic"></p><p>预览中，<code>H_ﬁx_1</code>向 master 和 develop 分别合并，点击确定，完成分支合并</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-ilovepdf_com-33.jpg?x-oss-process=style/iPic"></p><p>合并完成后，默认当前分支为 develop，master 分支有版本需要更新， 当前分支切换为 master，进行推送，完成补丁修复</p><p>在完成发布版本和完成修复补丁时，如果遇到冲突，可仿照冲突修改办法，再进行后续操作</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> SourceTree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 MWeb+GitHub 创建静态 Blog</title>
      <link href="2017/06/30/%E4%BD%BF%E7%94%A8%20MWeb+GitHub%20%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%20Blog/"/>
      <url>2017/06/30/%E4%BD%BF%E7%94%A8%20MWeb+GitHub%20%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%20Blog/</url>
      
        <content type="html"><![CDATA[<h1 id="示例博客"><a href="#示例博客" class="headerlink" title="示例博客"></a>示例博客</h1><p><a href="http://junyuyuan.top/">JY Blog</a></p><h1 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h1><p><a href="https://github.com/">GitHub 网站</a></p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-033951.jpg?x-oss-process=style/iPic"></p><h1 id="创建网站仓库"><a href="#创建网站仓库" class="headerlink" title="创建网站仓库"></a>创建网站仓库</h1><h2 id="点击创建仓库按钮"><a href="#点击创建仓库按钮" class="headerlink" title="点击创建仓库按钮"></a>点击创建仓库按钮</h2><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-033953.jpg?x-oss-process=style/iPic"></p><h2 id="创建仓库，输入仓库名称"><a href="#创建仓库，输入仓库名称" class="headerlink" title="创建仓库，输入仓库名称"></a>创建仓库，输入仓库名称</h2><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-33954.jpg?x-oss-process=style/iPic"></p><h2 id="创建成功"><a href="#创建成功" class="headerlink" title="创建成功"></a>创建成功</h2><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-033956.jpg?x-oss-process=style/iPic"></p><h1 id="使用MWeb生成静态网站"><a href="#使用MWeb生成静态网站" class="headerlink" title="使用MWeb生成静态网站"></a>使用MWeb生成静态网站</h1><h2 id="将文档库转换成静态网站"><a href="#将文档库转换成静态网站" class="headerlink" title="将文档库转换成静态网站"></a>将文档库转换成静态网站</h2><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-033957.jpg?x-oss-process=style/iPic"></p><h2 id="设置静态网站信息"><a href="#设置静态网站信息" class="headerlink" title="设置静态网站信息"></a>设置静态网站信息</h2><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-033958.jpg?x-oss-process=style/iPic"></p><h1 id="Clone-你的-pages-到-MWeb-静态网站生成目录中"><a href="#Clone-你的-pages-到-MWeb-静态网站生成目录中" class="headerlink" title="Clone 你的 pages 到 MWeb 静态网站生成目录中"></a>Clone 你的 pages 到 MWeb 静态网站生成目录中</h1><p><strong>注意：</strong> 如果你之前都已经可以正常用 git 来发布静态网站了，可以跳过这一步。如果不是，请看下面的步骤：</p><ol><li>用 MWeb 生成静态网站。</li><li>去 “MWeb 偏好设置” - “通用设置” - “生成的静态网站保存位置” 那里，点 “在 Finder 中显示” 按钮，进入 MWeb 的静态网站输出文件夹，在文件夹内应该可以看到你已生成的网站。比如说我生成的网站是 “MWeb中文官网”，就会看到一个 “MWeb中文官网” 的文件夹，文件夹内就是生成的静态网站了。下面会以 “MWeb中文官网” 做例子。</li><li>在命令行中进入 “MWeb 的静态网站输出文件夹”。如果你不知道怎么做，可以在 Finder 中选择 “MWeb中文官网” 文件夹的上一级文件夹，按 <code>CMD + C</code> 复制，再打开命令行窗口，键入 cd 命令，加一个空格，再按 <code>CMD + V</code> 粘贴路径，再按 Enter。。</li><li>删除 “MWeb中文官网” 文件夹，然后在命令行中执行：<code>git clone &#39;你的 git pages 的 repo&#39; &#39;MWeb中文官网&#39;</code>。 这里的 <code>&#39;你的 git pages 的 repo&#39; &#39;MWeb中文官网&#39;</code> 请换成你自己的。在 MWeb 中使用 “清理并重新生成” 命令，重新生成静态网站。</li></ol><p><strong>注意：</strong> 在你 git 发布出问题的时候，也可以用上面的 3、4、5 这三个步骤进行初始化。</p><h1 id="配置发布脚本"><a href="#配置发布脚本" class="headerlink" title="配置发布脚本"></a>配置发布脚本</h1><h2 id="在下图，在-“MWeb-偏好设置”-“扩展”-“发布脚本”-中配置。"><a href="#在下图，在-“MWeb-偏好设置”-“扩展”-“发布脚本”-中配置。" class="headerlink" title="在下图，在 “MWeb 偏好设置” - “扩展” - “发布脚本” 中配置。"></a>在下图，在 “MWeb 偏好设置” - “扩展” - “发布脚本” 中配置。</h2><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-033959.jpg?x-oss-process=style/iPic"></p><h2 id="点击加载例子"><a href="#点击加载例子" class="headerlink" title="点击加载例子"></a>点击加载例子</h2><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-034000.jpg?x-oss-process=style/iPic"></p><h2 id="使用发布脚本"><a href="#使用发布脚本" class="headerlink" title="使用发布脚本"></a>使用发布脚本</h2><p>使用方法非常简单，右键网站分类，选择 “复制发布脚本命令并打开终端（Terminal）…”，当终端打开后，在终端中按快捷键 <code>Command + V</code> 即可。如图：</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-034002.jpg?x-oss-process=style/iPic"></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> MWeb </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cordova 开发 iOS 说明书</title>
      <link href="2016/06/30/Cordova%20%E5%BC%80%E5%8F%91%20iOS%20%E8%AF%B4%E6%98%8E%E4%B9%A6/"/>
      <url>2016/06/30/Cordova%20%E5%BC%80%E5%8F%91%20iOS%20%E8%AF%B4%E6%98%8E%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="安装及项目创建"><a href="#安装及项目创建" class="headerlink" title="安装及项目创建"></a>安装及项目创建</h1><blockquote><p>教程目录如下,请根据自己进度自行选择阅读</p><ol><li>拥有 X-Code</li><li>安装 node.js 环境</li><li>使用终端安装 Cordova</li><li>创建及运行项目</li></ol></blockquote><h2 id="一-安装-X-Code"><a href="#一-安装-X-Code" class="headerlink" title="一. 安装 X-Code"></a>一. 安装 X-Code</h2><h2 id="二-安装-Node-js-环境"><a href="#二-安装-Node-js-环境" class="headerlink" title="二. 安装 Node.js 环境"></a>二. 安装 Node.js 环境</h2><p>首先进入官网下载 <a href="https://nodejs.org/en/">Node.js</a></p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-033939.png?x-oss-process=style/iPic" alt="14815973227023"></p><h2 id="三-使用终端命令安装-Cordova"><a href="#三-使用终端命令安装-Cordova" class="headerlink" title="三. 使用终端命令安装 Cordova"></a>三. 使用终端命令安装 Cordova</h2><p>打开终端输入安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g cordova</span><br></pre></td></tr></table></figure><p>输入电脑密码后等待一会就能安装成功了。如下图</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-033940.png?x-oss-process=style/iPic" alt="14815976759197"></p><p>如未成功，请参考如下解决方案</p><ul><li>如果没有安装 <a href="https://git-scm.com/">GIT Client</a>，请自行下载安装。</li><li>去 <a href="http://cordova.apache.org/docs/en/4.0.0/guide/cli/index.html#The%20Command-Line%20Interface">Cordova 命令行帮助</a>查找关于你出问题的命令</li></ul><h2 id="四-创建项目"><a href="#四-创建项目" class="headerlink" title="四. 创建项目"></a>四. 创建项目</h2><ol><li>首先请建立一个文件夹，并通过终端 cd 进去 不然创建的项目在根目录下 你很难找到它<br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-033942.png?x-oss-process=style/iPic" alt="14815982414230"></li><li>通过终端命令创建一个项目<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova create firstCordovaDoc com.aimi.firstCordova firstCordova</span><br></pre></td></tr></table></figure>参数解释：<ul><li><code>firstCordovaDoc</code>:对应你整个项目的文件夹名称</li><li><code>com.aimi.firstCordova</code>:对应 ios 工程的 bundleID</li><li><code>firstCordova</code>:对应 ios 工程名</li></ul></li><li>为项目创建 ios 工程<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova platform add ios</span><br></pre></td></tr></table></figure><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-33943.png?x-oss-process=style/iPic" alt="14815990664527"><br>此时在项目文件夹下的<code>platforms</code>文件夹中会多出<code>ios</code>文件夹，进入后就可以看到ios工程了。<br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-033944.png?x-oss-process=style/iPic" alt="14815992218387"></li><li>最后我们来试用一下<code>Cordova</code></li></ol><p><code>Cordova</code>的开发是使用h5开发，所以我们要找到其入口<code>Index.html</code>，如下图<br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-033945.png?x-oss-process=style/iPic" alt="14815994855314"><br><strong>注意：是在<code>Staging</code>文件夹下的<code>Index.html</code>文件，而非根目录下的那个</strong></p><p>简单写一点html代码，替换index.html中的代码，看看混合开发的h5 app应用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">            &lt;title&gt;页面标题&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">         &lt;h1 align=&quot;center&quot;&gt;</span><br><span class="line">            YO!Man!</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="支持入参及调回的插件开发"><a href="#支持入参及调回的插件开发" class="headerlink" title="支持入参及调回的插件开发"></a>支持入参及调回的插件开发</h1><blockquote><p>教程目录如下,请根据自己进度自行选择阅读</p><ol><li>创建 ios 插件源文件</li><li>实现插件的 OC 代码编写(包括 OC 回调 JS)</li><li>配置 config.xml 文件</li><li>简述 Cordova 插件运作原理</li><li>写 JS 代码来调用我们的插件进行测试</li></ol></blockquote><h2 id="一-创建-ios-插件源文件"><a href="#一-创建-ios-插件源文件" class="headerlink" title="一. 创建 ios 插件源文件"></a>一. 创建 ios 插件源文件</h2><ol><li><p>首先找到<code>Plugins</code>文件夹，该文件夹下存放的是所有插件的源码文件</p></li><li><p>创建我们的插件文件夹 com.anCordova.anAlert 文件夹，插件文件夹的命名规范还是要遵守一下的，类似 bundleID 很好理解<br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-033947.png?x-oss-process=style/iPic" alt="14816076286904"></p></li><li><p>在刚创建的文件夹下新建代码文件，继承cordova框架的<code>CDVPlugin</code><br><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-33948.png?x-oss-process=style/iPic" alt="14816076963678"></p></li><li><p>改动一下<code>#import</code>，因为<code>.h</code>文件报错，这是 Cordova 框架的bug，毕竟是改写的原生代码。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Cordova/CDVPlugin.h&gt;</span><br><span class="line"></span><br><span class="line">@interface AMAlertHelper : CDVPlugin</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h2 id="二-实现插件的-OC-代码编写（包括-OC-回调-JS）"><a href="#二-实现插件的-OC-代码编写（包括-OC-回调-JS）" class="headerlink" title="二. 实现插件的 OC 代码编写（包括 OC 回调 JS）"></a>二. 实现插件的 OC 代码编写（包括 OC 回调 JS）</h2><blockquote><p>在AMAlertHelper.m实现alert调用及回调js方法</p><p><code>.h</code>里需要声明方法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-(void)showAlertWithTitle:(CDVInvokedUrlCommand *)command&#123;</span><br><span class="line"></span><br><span class="line">    if (command.arguments.count&gt;0) &#123;</span><br><span class="line">        //获取到入参数组中的第一个元素</span><br><span class="line">        //自由约定入参数组的顺序</span><br><span class="line">        NSString* title = command.arguments[0];</span><br><span class="line"></span><br><span class="line">        //创建alertVC</span><br><span class="line">        UIAlertController* alertVC = [UIAlertController alertControllerWithTitle:title message:nil preferredStyle:UIAlertControllerStyleAlert];</span><br><span class="line">        UIAlertAction* action = [UIAlertAction actionWithTitle:@&quot;确定&quot; style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class="line">            //创建一个回调对象并附上String类型参数</span><br><span class="line">            CDVPluginResult* pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsString:@&quot;Hey!I&#x27;m OC!&quot;];</span><br><span class="line">            //通过cordova框架中的callBackID回调至JS的回调函数上</span><br><span class="line">            [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];</span><br><span class="line">        &#125;];</span><br><span class="line">        [alertVC addAction:action];</span><br><span class="line">        [self.viewController presentViewController:alertVC animated:YES completion:nil];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //如果没有入参,则回调JS失败函数</span><br><span class="line">        CDVPluginResult* pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsString:@&quot;没有入参alert title&quot;];</span><br><span class="line">        [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法的入参必须是<code>CDVInvokedUrlCommand</code>对象，我们经常用到的参数有：<br><code>callbackID</code>对应我们需要回调js时，指定发送的函数 id<br><code>arguments</code>对应 JS 调用插件时给我们的入参</p><h2 id="三-配置-config-xml-文件"><a href="#三-配置-config-xml-文件" class="headerlink" title="三. 配置 config.xml 文件"></a>三. 配置 config.xml 文件</h2><p>为了让 JS 能够调用我们的 OC 类，我们必须配置<code>config.xml</code>文件<br>注意：是<code>Staging</code>下的 config 文件<br>添加如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;feature name=&quot;ocAlertModel&quot;&gt;</span><br><span class="line">        &lt;param name=&quot;ios-package&quot; value=&quot;AMAlertHelper&quot; /&gt;</span><br><span class="line">&lt;/feature&gt;</span><br></pre></td></tr></table></figure><p><code>ocAlertModel</code>为我们给 OC 类命名的实例对象名称<br><code>AMAlertHelper</code>为插件 OC 类名</p><h2 id="四-简述-Cordova-插件运作原理"><a href="#四-简述-Cordova-插件运作原理" class="headerlink" title="四. 简述 Cordova 插件运作原理"></a>四. 简述 Cordova 插件运作原理</h2><p>这里简单解释下为什么要配置<code>config.xml</code>文件及 Cordova 插件原理</p><p>当我们自己做原生的<code>UIWebView</code>于 JS 做交互时,可以通过注入模型的方式来做</p><p>我们会在<code>UIWebView</code> 加载完成的代理中写上如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">self.jsContext = [webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class="line">AMAlertHelper * ocAlertmodel  = [[AMAlertHelper alloc] init];</span><br><span class="line">self.jsContext[@&quot;AMAlertModel&quot;] = ocAlertmodel;</span><br><span class="line">ocAlertmodel.jsContext = self.jsContext;</span><br><span class="line">ocAlertmodel.webView = self.webView;</span><br></pre></td></tr></table></figure><p>这样 WebView 中就有了我们的<code>ocAlertmodel</code>对象,那么当 JS 代码有调用<code>ocAlertmodel</code>对象的方法,则会进入到模型的实例方法中,完成 JS 对 OC 的调用</p><p>Cordova 插件同理,配置了<code>config.xml</code>后，Cordova 则会在编译时,将我们的插件类以模型方式注入到它的 WebView 中,并且对象名称就是我们配置的<code>name</code>属性<br>JS 在调用时就直接使用该对象名进行调用</p><h2 id="五-写-JS-代码来调用我们的插件进行测试"><a href="#五-写-JS-代码来调用我们的插件进行测试" class="headerlink" title="五. 写 JS 代码来调用我们的插件进行测试"></a>五. 写 JS 代码来调用我们的插件进行测试</h2><p>回到<code>Staging</code>下的<code>index.html</code>文件，直接替换如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;AMAlert&lt;/title&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class="line">            &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;cordova.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">            &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class="line"></span><br><span class="line">            //调用OC插件方法</span><br><span class="line">            function alertShow() &#123;</span><br><span class="line">                //以字符串形式调用OC注入模型的实例方法</span><br><span class="line">                //通过cordova 将我们的模型名称,方法名,参数,成功回调的func及失败回调的func 传入</span><br><span class="line">                cordova.exec(alertSuccess,alertFail,&quot;ocAlertModel&quot;,&quot;showAlertWithTitle&quot;,[&quot;Hey,I&#x27;m JS!&quot;]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //调用成功的回调函数</span><br><span class="line">            function alertSuccess(msg) &#123;</span><br><span class="line">                alert(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //调用失败的回调函数</span><br><span class="line">            function alertFail(msg) &#123;</span><br><span class="line">                alert(&#x27;调用OC失败: &#x27; + msg);</span><br><span class="line">            &#125;</span><br><span class="line">            &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body style=&quot;padding-top:50px&quot;&gt;</span><br><span class="line">        &lt;button style=&quot;font-size:17px;&quot; onclick=&quot;alertShow();&quot;&gt;调用OC插件&lt;/button&gt; &lt;br&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>到此为止,简易插件的开发已经完成了,最终效果走一下</p><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-033949.gif" alt="14816089994096"></p><h2 id="六-将-oc-方法映射成-js-代码上-并将插件打包供-h5-开发人员使用"><a href="#六-将-oc-方法映射成-js-代码上-并将插件打包供-h5-开发人员使用" class="headerlink" title="六. 将 oc 方法映射成 js 代码上,并将插件打包供 h5 开发人员使用"></a>六. 将 oc 方法映射成 js 代码上,并将插件打包供 h5 开发人员使用</h2><p>完成以上这些只是插件开发好了,然而问题是</p><ul><li>js 调用 oc 插件是通过字符串形式的,我们不能这么低端,要让 h5 开发者通过 js 语言直接调用插件</li><li>h5 的开发人员并没有安装 x-code 那么高端大气上档次的软件,我们需要将插件单独打包给他们</li></ul><h1 id="插件打包及映射-js-代码"><a href="#插件打包及映射-js-代码" class="headerlink" title="插件打包及映射 js 代码"></a>插件打包及映射 js 代码</h1><blockquote><p>教程目录如下,请根据自己进度自行选择阅读</p><ol><li>创建插件打包文件夹及必要文件</li><li>编写 JS 代码(oc 语法映射至 js 语法)</li><li>配置 plugin.xml 文件</li><li>添加本地插件,通过 js 的语法去调用插件.</li></ol></blockquote><h2 id="一-创建插件打包文件夹及必要文件"><a href="#一-创建插件打包文件夹及必要文件" class="headerlink" title="一. 创建插件打包文件夹及必要文件"></a>一. 创建插件打包文件夹及必要文件</h2><blockquote><p>在桌面处创建插件打包文件夹 cordova-amAler-plugin-ios (遵守命名规范)，并创建子文件夹及子文件如下图，将之前开发插件的代码(AMAlertHelper.h 及.m)复制到 ios 文件夹下</p><p>请创建好这样的结构后再进行后续动作</p></blockquote><p><img src="https://jy-blog.oss-cn-beijing.aliyuncs.com/blog/2019-01-26-033950.png?x-oss-process=style/iPic" alt="14816096596614"></p><h2 id="二-编写-JS-代码"><a href="#二-编写-JS-代码" class="headerlink" title="二.编写 JS 代码"></a>二.编写 JS 代码</h2><p>之前在<code>index.html</code>调用插件时,用的是字符串形式的方法名.这里写一个将方法映射至 JS 调用的代码</p><p>其原理就是创建一个 JS 对象指向我们的 OC 对象，并且给 JS 对象创建一个实例方法指向我们的 OC 方法</p><blockquote><p>打开之前创建的<code>AlertHelper.js</code>文件,并进行编写代码如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var exec = require(&quot;cordova/exec&quot;);</span><br><span class="line"></span><br><span class="line">//定义一个类名为AlertHelper的对象构建函数</span><br><span class="line">function AlertModel() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">//给AlertModel添加一个js方法jsAlertShow</span><br><span class="line">//映射至之前写的方法上 ocAlertModel是我们给OC类命名的实例对象名称</span><br><span class="line">//showAlertWithTitle是我们OC的方法</span><br><span class="line">//option是入参</span><br><span class="line">AlertModel.prototype.jsAlertShow = function (success,fail,option) &#123;</span><br><span class="line">     exec(success, fail, &#x27;ocAlertModel&#x27;, &#x27;showAlertWithTitle&#x27;, option);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//new一个AlertModel的类对象，并赋值给module.exports</span><br><span class="line">var alertModel = new AlertModel();</span><br><span class="line">module.exports = alertModel;</span><br></pre></td></tr></table></figure><h2 id="三-配置-plugin-xml-文件"><a href="#三-配置-plugin-xml-文件" class="headerlink" title="三. 配置 plugin.xml 文件"></a>三. 配置 plugin.xml 文件</h2><p>配置<code>plugin.xml</code> 就是为了告诉 Cordova 我们的文件路径在哪,我们的 oc 类名是什么，oc 对象名是什么，js 类名及 js 对象名是什么，等等。这样 Cordova 才能在安装插件时，正确的进行指向。</p><p>具体哪些配置对应了什么意思，在代码中已写了注释</p><blockquote><p>打开前面创建的<code>plugin.xml</code>文件，并添加如下代码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!--    id需要和文件夹名称保持一致 (插件的id)--&gt;</span><br><span class="line">&lt;plugin xmlns=&quot;http://phonegap.com/ns/plugins/1.0&quot;</span><br><span class="line">    id=&quot;com.amCordova.amAlertHelper&quot;</span><br><span class="line">    version=&quot;1.0.0&quot;&gt;</span><br><span class="line">    &lt;engines&gt;</span><br><span class="line">        &lt;engine name=&quot;cordova&quot; version=&quot;&gt;=3.3.0&quot; /&gt;</span><br><span class="line">    &lt;/engines&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;alertHelper&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;插件的描述&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    对应js映射文件的地址及名称--&gt;</span><br><span class="line">    &lt;js-module src=&quot;www/AlertHelper.js&quot; name=&quot;alertModel&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    js调用时的对象名称--&gt;</span><br><span class="line">        &lt;clobbers target=&quot;alertModel&quot; /&gt;</span><br><span class="line">    &lt;/js-module&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    ios所有文件的存放地址--&gt;</span><br><span class="line">&lt;!--如果有图片的话也需要在这里配置,前缀是source-file--&gt;</span><br><span class="line">    &lt;platform name=&quot;ios&quot;&gt;</span><br><span class="line">        &lt;source-file src=&quot;src/ios/AMAlertHelper.m&quot; /&gt;</span><br><span class="line">        &lt;header-file src=&quot;src/ios/AMAlertHelper.h&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;config-file target=&quot;config.xml&quot; parent=&quot;/widget&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--            插件映射至ios的类名--&gt;</span><br><span class="line">        &lt;feature name=&quot;ocAlertModel&quot;&gt;</span><br><span class="line">            &lt;param name=&quot;ios-package&quot; value=&quot;AMAlertHelper&quot; /&gt;</span><br><span class="line">        &lt;/feature&gt;</span><br><span class="line">        &lt;/config-file&gt;</span><br><span class="line">    &lt;/platform&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h2 id="四-将本地插件添加至-Cordova-项目中测试我们的插件"><a href="#四-将本地插件添加至-Cordova-项目中测试我们的插件" class="headerlink" title="四. 将本地插件添加至 Cordova 项目中测试我们的插件"></a>四. 将本地插件添加至 Cordova 项目中测试我们的插件</h2><p>至此为止,插件的开发已经全部完成了,所谓的打包其实就是我们那个带配置文件的插件文件夹</p><p>新建一个 Cordova 项目并且将我们的本地插件添加进去进行测试一下</p><ol><li>新建一个 Cordova 项目并且添加 ios 工程 (这里不详说了)</li><li>进入到项目的目录下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /Users/aimi/Desktop/cordova/testCordovaDoc</span><br></pre></td></tr></table></figure></li><li>添加刚刚创建的本地插件包<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add</span><br><span class="line">/Users/aimi/Desktop/cordova/MyPlugin/com.amCordova.amAlert</span><br></pre></td></tr></table></figure></li><li>进行测试,通过js的语法去调用插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alertModel.jsAlertShow(alertSuccess,alertFail,[&quot;Hey,I&#x27;m JS!&quot;]);</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>替换 index.html 代码如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;AMAlert&lt;/title&gt;</span><br><span class="line">        &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class="line">            &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;cordova.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">            &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class="line"></span><br><span class="line">            //调用OC插件方法</span><br><span class="line">            function alertShow() &#123;</span><br><span class="line">                //通过js代码调用</span><br><span class="line">                alertModel.jsAlertShow(alertSuccess,alertFail,[&quot;Hey,I&#x27;m JS!&quot;]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //调用成功的回调函数</span><br><span class="line">            function alertSuccess(msg) &#123;</span><br><span class="line">                alert(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //调用失败的回调函数</span><br><span class="line">            function alertFail(msg) &#123;</span><br><span class="line">                alert(&#x27;调用OC失败: &#x27; + msg);</span><br><span class="line">            &#125;</span><br><span class="line">            &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body style=&quot;padding-top:50px&quot;&gt;</span><br><span class="line">        &lt;button style=&quot;font-size:17px;&quot; onclick=&quot;alertShow();&quot;&gt;调用OC插件&lt;/button&gt; &lt;br&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cordova </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Cordova </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
